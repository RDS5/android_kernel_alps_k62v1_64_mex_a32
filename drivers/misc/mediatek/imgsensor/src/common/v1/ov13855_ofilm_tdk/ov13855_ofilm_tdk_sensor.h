/*
 * ov13855_ofilm_tdk_sensor.h
 *
 * Copyright (c) 2018-2019 Huawei Technologies Co., Ltd.
 *
 * ov13855_ofilm_tdk image sensor config settings
 *
 * This software is licensed under the terms of the GNU General Public
 * License version 2, as published by the Free Software Foundation, and
 * may be copied, distributed, and modified under those terms.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 */

#ifndef _OV13855_OFILM_TDK_SENSOR_H
#define _OV13855_OFILM_TDK_SENSOR_H

#include "imgsensor_sensor_common.h"
#include "kd_imgsensor.h"

#define REG_GAIN_1X 0x80
#define REG_MAX_AGAIN 0x7c0

#define SENSOR_TIMEING_HTS_REG_H 0x380c
#define SENSOR_TIMEING_HTS_REG_L 0x380d
#define SENSOR_TIMEING_VTS_REG_H 0x380e
#define SENSOR_TIMEING_VTS_REG_L 0x380f
#define SENSOR_LONG_EXPO_REG_H 0x3500
#define SENSOR_LONG_EXPO_REG_M 0x3501
#define SENSOR_LONG_EXPO_REG_L 0x3502
#define SENSOR_LONG_GAIN_REG_H 0x3508
#define SENSOR_LONG_GAIN_REG_L 0x3509

#define SENSOR_TMP_CTRL_REG 0x4d12
#define SENSOR_TMP_READ_REG 0x4d13

#define SENSOR_MODULE_MAX_TEMPERATURE 192
#define SENSOR_MODULE_MIN_TEMPERATURE 164
#define SENSOR_MODULE_MAX_REG_TMP 0xc000
#define SENSOR_MODULE_DEFAULT_TMP 20

#define LONG_EXPO_REG_H_VALUE 0x00
#define LONG_EXPO_REG_M_VALUE 0xc8
#define LONG_EXPO_REG_L_VALUE 0x60
#define NORMAL_EXPOSE_TIME_MAX 300000
#define EEPROM_LENS_TYPE_ADDR 0x06 /* LENS type addr in otp map. */
#define SENSOR_INTEG_TIME_HL  0x3c9a
#define SENSOR_INTEG_TIME_H   0x3c9c

static struct imgsensor_i2c_reg stream_on[] = {
	{ 0x0100, 0x01, 0x00 },
};

static struct imgsensor_i2c_reg stream_off[] = {
	{ 0x0100, 0x00, 0x00 },
};

static struct imgsensor_i2c_reg init_setting[] = {
	{ 0x0103, 0x01, 0x00 },
	{ 0x0300, 0x06, 0x00 },
	{ 0x0301, 0x02, 0x00 },
	{ 0x0302, 0x2c, 0x00 },
	{ 0x0303, 0x00, 0x00 },
	{ 0x0304, 0x00, 0x00 },
	{ 0x0305, 0x01, 0x00 },
	{ 0x0307, 0x01, 0x00 },
	{ 0x030b, 0x06, 0x00 },
	{ 0x030c, 0x02, 0x00 },
	{ 0x030d, 0x88, 0x00 },
	{ 0x0312, 0x11, 0x00 },
	{ 0x3022, 0x01, 0x00 },
	{ 0x3012, 0x40, 0x00 },
	{ 0x3013, 0x72, 0x00 },
	{ 0x3016, 0x72, 0x00 },
	{ 0x301b, 0xF0, 0x00 },
	{ 0x301f, 0xd0, 0x00 },
	{ 0x3106, 0x15, 0x00 },
	{ 0x3107, 0x23, 0x00 },
	{ 0x3500, 0x00, 0x00 },
	{ 0x3501, 0x80, 0x00 },
	{ 0x3502, 0x00, 0x00 },
	{ 0x3508, 0x02, 0x00 },
	{ 0x3509, 0x00, 0x00 },
	{ 0x350a, 0x00, 0x00 },
	{ 0x350e, 0x00, 0x00 },
	{ 0x3510, 0x00, 0x00 },
	{ 0x3511, 0x02, 0x00 },
	{ 0x3512, 0x00, 0x00 },
	{ 0x3600, 0x2b, 0x00 },
	{ 0x3601, 0x52, 0x00 },
	{ 0x3602, 0x60, 0x00 },
	{ 0x3612, 0x05, 0x00 },
	{ 0x3613, 0xa4, 0x00 },
	{ 0x3620, 0x80, 0x00 },
	{ 0x3621, 0x10, 0x00 },
	{ 0x3622, 0x30, 0x00 },
	{ 0x3624, 0x1c, 0x00 },
	{ 0x3640, 0x10, 0x00 },
	{ 0x3641, 0x70, 0x00 },
	{ 0x3660, 0x04, 0x00 },
	{ 0x3661, 0x80, 0x00 },
	{ 0x3662, 0x12, 0x00 },
	{ 0x3664, 0x73, 0x00 },
	{ 0x3665, 0xa7, 0x00 },
	{ 0x366e, 0xff, 0x00 },
	{ 0x366f, 0xf4, 0x00 },
	{ 0x3674, 0x00, 0x00 },
	{ 0x3679, 0x0c, 0x00 },
	{ 0x367f, 0x01, 0x00 },
	{ 0x3680, 0x0c, 0x00 },
	{ 0x3681, 0x50, 0x00 },
	{ 0x3682, 0x50, 0x00 },
	{ 0x3683, 0xa9, 0x00 },
	{ 0x3684, 0xa9, 0x00 },
	{ 0x3706, 0x40, 0x00 },
	{ 0x3709, 0x5f, 0x00 },
	{ 0x3714, 0x24, 0x00 },
	{ 0x371a, 0x3e, 0x00 },
	{ 0x3737, 0x04, 0x00 },
	{ 0x3738, 0xcc, 0x00 },
	{ 0x3739, 0x12, 0x00 },
	{ 0x373d, 0x26, 0x00 },
	{ 0x3764, 0x20, 0x00 },
	{ 0x3765, 0x20, 0x00 },
	{ 0x37a1, 0x36, 0x00 },
	{ 0x37a8, 0x3b, 0x00 },
	{ 0x37ab, 0x31, 0x00 },
	{ 0x37c2, 0x04, 0x00 },
	{ 0x37c3, 0xf1, 0x00 },
	{ 0x37c5, 0x00, 0x00 },
	{ 0x37d8, 0x03, 0x00 },
	{ 0x37d9, 0x0c, 0x00 },
	{ 0x37da, 0xc2, 0x00 },
	{ 0x37dc, 0x02, 0x00 },
	{ 0x37e0, 0x00, 0x00 },
	{ 0x37e1, 0x0a, 0x00 },
	{ 0x37e2, 0x14, 0x00 },
	{ 0x37e3, 0x04, 0x00 },
	{ 0x37e4, 0x2A, 0x00 },
	{ 0x37e5, 0x03, 0x00 },
	{ 0x37e6, 0x04, 0x00 },
	{ 0x3800, 0x00, 0x00 },
	{ 0x3801, 0x00, 0x00 },
	{ 0x3802, 0x00, 0x00 },
	{ 0x3803, 0x08, 0x00 },
	{ 0x3804, 0x10, 0x00 },
	{ 0x3805, 0x9f, 0x00 },
	{ 0x3806, 0x0c, 0x00 },
	{ 0x3807, 0x57, 0x00 },
	{ 0x3808, 0x10, 0x00 },
	{ 0x3809, 0x80, 0x00 },
	{ 0x380a, 0x0c, 0x00 },
	{ 0x380b, 0x40, 0x00 },
	{ 0x380c, 0x04, 0x00 },
	{ 0x380d, 0x62, 0x00 },
	{ 0x380e, 0x0c, 0x00 },
	{ 0x380f, 0x8e, 0x00 },
	{ 0x3811, 0x10, 0x00 },
	{ 0x3813, 0x07, 0x00 },
	{ 0x3814, 0x01, 0x00 },
	{ 0x3815, 0x01, 0x00 },
	{ 0x3816, 0x01, 0x00 },
	{ 0x3817, 0x01, 0x00 },
	{ 0x3820, 0xb0, 0x00 },
	{ 0x3821, 0x00, 0x00 },
	{ 0x3822, 0xc2, 0x00 },
	{ 0x3823, 0x18, 0x00 },
	{ 0x3826, 0x11, 0x00 },
	{ 0x3827, 0x1c, 0x00 },
	{ 0x3829, 0x00, 0x00 },
	{ 0x3832, 0x00, 0x00 },
	{ 0x3c80, 0x00, 0x00 },
	{ 0x3c87, 0x01, 0x00 },
	{ 0x3c8c, 0x19, 0x00 },
	{ 0x3c8d, 0x1c, 0x00 },
	{ 0x3c90, 0x00, 0x00 },
	{ 0x3c91, 0x00, 0x00 },
	{ 0x3c92, 0x00, 0x00 },
	{ 0x3c93, 0x00, 0x00 },
	{ 0x3c94, 0x40, 0x00 },
	{ 0x3c95, 0x54, 0x00 },
	{ 0x3c96, 0x34, 0x00 },
	{ 0x3c97, 0x04, 0x00 },
	{ 0x3c98, 0x00, 0x00 },
	{ 0x3d8c, 0x73, 0x00 },
	{ 0x3d8d, 0xc0, 0x00 },
	{ 0x3f00, 0x0b, 0x00 },
	{ 0x3f03, 0x00, 0x00 },
	{ 0x4001, 0xe0, 0x00 },
	{ 0x4008, 0x00, 0x00 },
	{ 0x4009, 0x0f, 0x00 },
	{ 0x4011, 0xf0, 0x00 },
	{ 0x4017, 0x08, 0x00 },
	{ 0x4050, 0x04, 0x00 },
	{ 0x4051, 0x0b, 0x00 },
	{ 0x4052, 0x00, 0x00 },
	{ 0x4053, 0x80, 0x00 },
	{ 0x4054, 0x00, 0x00 },
	{ 0x4055, 0x80, 0x00 },
	{ 0x4056, 0x00, 0x00 },
	{ 0x4057, 0x80, 0x00 },
	{ 0x4058, 0x00, 0x00 },
	{ 0x4059, 0x80, 0x00 },
	{ 0x405e, 0x00, 0x00 },
	{ 0x4500, 0x07, 0x00 },
	{ 0x4501, 0x00, 0x00 },
	{ 0x4503, 0x00, 0x00 },
	{ 0x450a, 0x04, 0x00 },
	{ 0x4800, 0x60, 0x00 },
	{ 0x4809, 0x04, 0x00 },
	{ 0x480c, 0x12, 0x00 },
	{ 0x481f, 0x30, 0x00 },
	{ 0x4833, 0x10, 0x00 },
	{ 0x4837, 0x0e, 0x00 },
	{ 0x4902, 0x01, 0x00 },
	{ 0x4d00, 0x03, 0x00 },
	{ 0x4d01, 0xc9, 0x00 },
	{ 0x4d02, 0xbc, 0x00 },
	{ 0x4d03, 0xd7, 0x00 },
	{ 0x4d04, 0xf0, 0x00 },
	{ 0x4d05, 0xa2, 0x00 },
	{ 0x5000, 0xff, 0x00 },
	{ 0x5001, 0x07, 0x00 },
	{ 0x5040, 0x39, 0x00 },
	{ 0x5041, 0x10, 0x00 },
	{ 0x5042, 0x10, 0x00 },
	{ 0x5043, 0x84, 0x00 },
	{ 0x5044, 0x62, 0x00 },
	{ 0x5180, 0x00, 0x00 },
	{ 0x5181, 0x10, 0x00 },
	{ 0x5182, 0x02, 0x00 },
	{ 0x5183, 0x0f, 0x00 },
	{ 0x5200, 0x1b, 0x00 },
	{ 0x520b, 0x07, 0x00 },
	{ 0x520c, 0x0f, 0x00 },
	{ 0x5300, 0x04, 0x00 },
	{ 0x5301, 0x0C, 0x00 },
	{ 0x5302, 0x0C, 0x00 },
	{ 0x5303, 0x0f, 0x00 },
	{ 0x5304, 0x00, 0x00 },
	{ 0x5305, 0x70, 0x00 },
	{ 0x5306, 0x00, 0x00 },
	{ 0x5307, 0x80, 0x00 },
	{ 0x5308, 0x00, 0x00 },
	{ 0x5309, 0xa5, 0x00 },
	{ 0x530a, 0x00, 0x00 },
	{ 0x530b, 0xd3, 0x00 },
	{ 0x530c, 0x00, 0x00 },
	{ 0x530d, 0xf0, 0x00 },
	{ 0x530e, 0x01, 0x00 },
	{ 0x530f, 0x10, 0x00 },
	{ 0x5310, 0x01, 0x00 },
	{ 0x5311, 0x20, 0x00 },
	{ 0x5312, 0x01, 0x00 },
	{ 0x5313, 0x20, 0x00 },
	{ 0x5314, 0x01, 0x00 },
	{ 0x5315, 0x20, 0x00 },
	{ 0x5316, 0x08, 0x00 },
	{ 0x5317, 0x08, 0x00 },
	{ 0x5318, 0x10, 0x00 },
	{ 0x5319, 0x88, 0x00 },
	{ 0x531a, 0x88, 0x00 },
	{ 0x531b, 0xa9, 0x00 },
	{ 0x531c, 0xaa, 0x00 },
	{ 0x531d, 0x0a, 0x00 },
	{ 0x5405, 0x02, 0x00 },
	{ 0x5406, 0x67, 0x00 },
	{ 0x5407, 0x01, 0x00 },
	{ 0x5408, 0x4a, 0x00 },
	{ 0x0100, 0x01, 0x00 },
};

static struct imgsensor_i2c_reg preview_setting[] = {
	{ 0x0100, 0x00, 0x00 },
	{ 0x0300, 0x02, 0x00 },
	{ 0x0301, 0x00, 0x00 },
	{ 0x0302, 0x5a, 0x00 },
	{ 0x0303, 0x01, 0x00 },
	{ 0x0307, 0x00, 0x00 },
	{ 0x3500, 0x00, 0x00 },
	{ 0x3501, 0x40, 0x00 },
	{ 0x3502, 0x00, 0x00 },
	{ 0x3662, 0x10, 0x00 },
	{ 0x3714, 0x28, 0x00 },
	{ 0x3737, 0x08, 0x00 },
	{ 0x3739, 0x20, 0x00 },
	{ 0x37c2, 0x14, 0x00 },
	{ 0x37e3, 0x08, 0x00 },
	{ 0x37e4, 0x38, 0x00 },
	{ 0x37e6, 0x08, 0x00 },
	{ 0x3800, 0x00, 0x00 },
	{ 0x3801, 0x00, 0x00 },
	{ 0x3802, 0x00, 0x00 },
	{ 0x3803, 0x08, 0x00 },
	{ 0x3804, 0x10, 0x00 },
	{ 0x3805, 0x9f, 0x00 },
	{ 0x3806, 0x0c, 0x00 },
	{ 0x3807, 0x57, 0x00 },
	{ 0x3808, 0x08, 0x00 },
	{ 0x3809, 0x40, 0x00 },
	{ 0x380a, 0x06, 0x00 },
	{ 0x380b, 0x20, 0x00 },
	{ 0x380c, 0x04, 0x00 },
	{ 0x380d, 0x62, 0x00 },
	{ 0x380e, 0x0c, 0x00 },
	{ 0x380f, 0x68, 0x00 },
	{ 0x3810, 0x00, 0x00 },
	{ 0x3811, 0x08, 0x00 },
	{ 0x3812, 0x00, 0x00 },
	{ 0x3813, 0x05, 0x00 },
	{ 0x3814, 0x03, 0x00 },
	{ 0x3815, 0x01, 0x00 },
	{ 0x3816, 0x03, 0x00 },
	{ 0x3817, 0x01, 0x00 },
	{ 0x3820, 0xb3, 0x00 },
	{ 0x3821, 0x00, 0x00 },
	{ 0x3826, 0x04, 0x00 },
	{ 0x3827, 0x90, 0x00 },
	{ 0x3829, 0x04, 0x00 },
	{ 0x4009, 0x0d, 0x00 },
	{ 0x4501, 0x0c, 0x00 }, /* skip PD pixels */
	{ 0x4837, 0x1c, 0x00 },
	{ 0x0100, 0x01, 0x00 },
};

static struct imgsensor_i2c_reg capture_setting[] = {
	{ 0x0100, 0x00, 0x00 },
	{ 0x0300, 0x06, 0x00 },
	{ 0x0301, 0x02, 0x00 },
	{ 0x0302, 0x2c, 0x00 },
	{ 0x0303, 0x00, 0x00 },
	{ 0x0307, 0x01, 0x00 },
	{ 0x3500, 0x00, 0x00 },
	{ 0x3501, 0x80, 0x00 },
	{ 0x3502, 0x00, 0x00 },
	{ 0x3662, 0x12, 0x00 },
	{ 0x3714, 0x24, 0x00 },
	{ 0x3737, 0x04, 0x00 },
	{ 0x3739, 0x12, 0x00 },
	{ 0x37c2, 0x04, 0x00 },
	{ 0x37e3, 0x04, 0x00 },
	{ 0x37e4, 0x2A, 0x00 },
	{ 0x37e6, 0x04, 0x00 },
	{ 0x3800, 0x00, 0x00 },
	{ 0x3801, 0x00, 0x00 },
	{ 0x3802, 0x00, 0x00 },
	{ 0x3803, 0x08, 0x00 },
	{ 0x3804, 0x10, 0x00 },
	{ 0x3805, 0x9f, 0x00 },
	{ 0x3806, 0x0c, 0x00 },
	{ 0x3807, 0x57, 0x00 },
	{ 0x3808, 0x10, 0x00 },
	{ 0x3809, 0x80, 0x00 },
	{ 0x380a, 0x0c, 0x00 },
	{ 0x380b, 0x40, 0x00 },
	{ 0x380c, 0x04, 0x00 },
	{ 0x380d, 0x62, 0x00 },
	{ 0x380e, 0x0c, 0x00 },
	{ 0x380f, 0x78, 0x00 },
	{ 0x3810, 0x00, 0x00 },
	{ 0x3811, 0x10, 0x00 },
	{ 0x3812, 0x00, 0x00 },
	{ 0x3813, 0x07, 0x00 },
	{ 0x3814, 0x01, 0x00 },
	{ 0x3815, 0x01, 0x00 },
	{ 0x3816, 0x01, 0x00 },
	{ 0x3817, 0x01, 0x00 },
	{ 0x3820, 0xb0, 0x00 },
	{ 0x3821, 0x00, 0x00 },
	{ 0x3826, 0x11, 0x00 },
	{ 0x3827, 0x1c, 0x00 },
	{ 0x3829, 0x00, 0x00 },
	{ 0x4009, 0x0f, 0x00 },
	{ 0x4501, 0x00, 0x00 },
	{ 0x4837, 0x0e, 0x00 },
	{ 0x0100, 0x01, 0x00 },
};

static struct imgsensor_i2c_reg video_setting[] = {
	{ 0x0100, 0x00, 0x00 },
	{ 0x0300, 0x06, 0x00 },
	{ 0x0301, 0x02, 0x00 },
	{ 0x0302, 0x2c, 0x00 },
	{ 0x0303, 0x00, 0x00 },
	{ 0x0307, 0x01, 0x00 },
	{ 0x3500, 0x00, 0x00 },
	{ 0x3501, 0x80, 0x00 },
	{ 0x3502, 0x00, 0x00 },
	{ 0x3662, 0x12, 0x00 },
	{ 0x3714, 0x24, 0x00 },
	{ 0x3737, 0x04, 0x00 },
	{ 0x3739, 0x12, 0x00 },
	{ 0x37c2, 0x04, 0x00 },
	{ 0x37e3, 0x04, 0x00 },
	{ 0x37e4, 0x2A, 0x00 },
	{ 0x37e6, 0x04, 0x00 },
	{ 0x3800, 0x00, 0x00 },
	{ 0x3801, 0x00, 0x00 },
	{ 0x3802, 0x00, 0x00 },
	{ 0x3803, 0x08, 0x00 },
	{ 0x3804, 0x10, 0x00 },
	{ 0x3805, 0x9f, 0x00 },
	{ 0x3806, 0x0c, 0x00 },
	{ 0x3807, 0x57, 0x00 },
	{ 0x3808, 0x10, 0x00 },
	{ 0x3809, 0x80, 0x00 },
	{ 0x380a, 0x0c, 0x00 },
	{ 0x380b, 0x40, 0x00 },
	{ 0x380c, 0x04, 0x00 },
	{ 0x380d, 0x62, 0x00 },
	{ 0x380e, 0x0c, 0x00 },
	{ 0x380f, 0x78, 0x00 },
	{ 0x3810, 0x00, 0x00 },
	{ 0x3811, 0x10, 0x00 },
	{ 0x3812, 0x00, 0x00 },
	{ 0x3813, 0x07, 0x00 },
	{ 0x3814, 0x01, 0x00 },
	{ 0x3815, 0x01, 0x00 },
	{ 0x3816, 0x01, 0x00 },
	{ 0x3817, 0x01, 0x00 },
	{ 0x3820, 0xb0, 0x00 },
	{ 0x3821, 0x00, 0x00 },
	{ 0x3826, 0x11, 0x00 },
	{ 0x3827, 0x1c, 0x00 },
	{ 0x3829, 0x00, 0x00 },
	{ 0x4009, 0x0f, 0x00 },
	{ 0x4501, 0x00, 0x00 },
	{ 0x4837, 0x0e, 0x00 },
	{ 0x0100, 0x01, 0x00 },
};

static struct imgsensor_i2c_reg hsvideo_setting[] = {
	{ 0x0100, 0x00, 0x00 },
	{ 0x0300, 0x06, 0x00 },
	{ 0x0301, 0x02, 0x00 },
	{ 0x0302, 0x2c, 0x00 },
	{ 0x0303, 0x00, 0x00 },
	{ 0x0307, 0x01, 0x00 },
	{ 0x3500, 0x00, 0x00 },
	{ 0x3501, 0x80, 0x00 },
	{ 0x3502, 0x00, 0x00 },
	{ 0x3662, 0x12, 0x00 },
	{ 0x3714, 0x24, 0x00 },
	{ 0x3737, 0x04, 0x00 },
	{ 0x3739, 0x12, 0x00 },
	{ 0x37c2, 0x04, 0x00 },
	{ 0x37e3, 0x04, 0x00 },
	{ 0x37e4, 0x2A, 0x00 },
	{ 0x37e6, 0x04, 0x00 },
	{ 0x3800, 0x00, 0x00 },
	{ 0x3801, 0x00, 0x00 },
	{ 0x3802, 0x00, 0x00 },
	{ 0x3803, 0x08, 0x00 },
	{ 0x3804, 0x10, 0x00 },
	{ 0x3805, 0x9f, 0x00 },
	{ 0x3806, 0x0c, 0x00 },
	{ 0x3807, 0x57, 0x00 },
	{ 0x3808, 0x10, 0x00 },
	{ 0x3809, 0x80, 0x00 },
	{ 0x380a, 0x0c, 0x00 },
	{ 0x380b, 0x40, 0x00 },
	{ 0x380c, 0x04, 0x00 },
	{ 0x380d, 0x62, 0x00 },
	{ 0x380e, 0x0c, 0x00 },
	{ 0x380f, 0x78, 0x00 },
	{ 0x3810, 0x00, 0x00 },
	{ 0x3811, 0x10, 0x00 },
	{ 0x3812, 0x00, 0x00 },
	{ 0x3813, 0x07, 0x00 },
	{ 0x3814, 0x01, 0x00 },
	{ 0x3815, 0x01, 0x00 },
	{ 0x3816, 0x01, 0x00 },
	{ 0x3817, 0x01, 0x00 },
	{ 0x3820, 0xb0, 0x00 },
	{ 0x3821, 0xb0, 0x00 },
	{ 0x3826, 0x11, 0x00 },
	{ 0x3827, 0x1c, 0x00 },
	{ 0x3829, 0x00, 0x00 },
	{ 0x4009, 0x0f, 0x00 },
	{ 0x4501, 0x00, 0x00 },
	{ 0x4837, 0x0e, 0x00 },
	{ 0x0100, 0x01, 0x00 },
};

static struct imgsensor_i2c_reg lsvideo_setting[] = {
	{ 0x0100, 0x00, 0x00 },
	{ 0x0300, 0x06, 0x00 },
	{ 0x0301, 0x02, 0x00 },
	{ 0x0302, 0x2c, 0x00 },
	{ 0x0303, 0x00, 0x00 },
	{ 0x0307, 0x01, 0x00 },
	{ 0x3500, 0x00, 0x00 },
	{ 0x3501, 0x80, 0x00 },
	{ 0x3502, 0x00, 0x00 },
	{ 0x3662, 0x12, 0x00 },
	{ 0x3714, 0x24, 0x00 },
	{ 0x3737, 0x04, 0x00 },
	{ 0x3739, 0x12, 0x00 },
	{ 0x37c2, 0x04, 0x00 },
	{ 0x37e3, 0x04, 0x00 },
	{ 0x37e4, 0x2A, 0x00 },
	{ 0x37e6, 0x04, 0x00 },
	{ 0x3800, 0x00, 0x00 },
	{ 0x3801, 0x00, 0x00 },
	{ 0x3802, 0x00, 0x00 },
	{ 0x3803, 0x08, 0x00 },
	{ 0x3804, 0x10, 0x00 },
	{ 0x3805, 0x9f, 0x00 },
	{ 0x3806, 0x0c, 0x00 },
	{ 0x3807, 0x57, 0x00 },
	{ 0x3808, 0x10, 0x00 },
	{ 0x3809, 0x80, 0x00 },
	{ 0x380a, 0x0c, 0x00 },
	{ 0x380b, 0x40, 0x00 },
	{ 0x380c, 0x04, 0x00 },
	{ 0x380d, 0x62, 0x00 },
	{ 0x380e, 0x0c, 0x00 },
	{ 0x380f, 0x78, 0x00 },
	{ 0x3810, 0x00, 0x00 },
	{ 0x3811, 0x10, 0x00 },
	{ 0x3812, 0x00, 0x00 },
	{ 0x3813, 0x07, 0x00 },
	{ 0x3814, 0x01, 0x00 },
	{ 0x3815, 0x01, 0x00 },
	{ 0x3816, 0x01, 0x00 },
	{ 0x3817, 0x01, 0x00 },
	{ 0x3820, 0xb0, 0x00 },
	{ 0x3821, 0xb0, 0x00 },
	{ 0x3826, 0x11, 0x00 },
	{ 0x3827, 0x1c, 0x00 },
	{ 0x3829, 0x00, 0x00 },
	{ 0x4009, 0x0f, 0x00 },
	{ 0x4501, 0x00, 0x00 },
	{ 0x4837, 0x0e, 0x00 },
	{ 0x0100, 0x01, 0x00 },
};

/* custom1 aperture sensor mode */
static struct imgsensor_i2c_reg cust1_setting[] = {
	{ 0x0100, 0x00, 0x00 },
	{ 0x0300, 0x06, 0x00 },
	{ 0x0301, 0x02, 0x00 },
	{ 0x0302, 0x2c, 0x00 },
	{ 0x0303, 0x00, 0x00 },
	{ 0x0307, 0x01, 0x00 },
	{ 0x3500, 0x00, 0x00 },
	{ 0x3501, 0x80, 0x00 },
	{ 0x3502, 0x00, 0x00 },
	{ 0x3662, 0x12, 0x00 },
	{ 0x3714, 0x24, 0x00 },
	{ 0x3737, 0x04, 0x00 },
	{ 0x3739, 0x12, 0x00 },
	{ 0x37c2, 0x04, 0x00 },
	{ 0x37e3, 0x04, 0x00 },
	{ 0x37e4, 0x2A, 0x00 },
	{ 0x37e6, 0x04, 0x00 },
	{ 0x3800, 0x01, 0x00 },
	{ 0x3801, 0xe0, 0x00 },
	{ 0x3802, 0x01, 0x00 },
	{ 0x3803, 0x60, 0x00 },
	{ 0x3804, 0x0e, 0x00 },
	{ 0x3805, 0xbf, 0x00 },
	{ 0x3806, 0x0a, 0x00 },
	{ 0x3807, 0xff, 0x00 },
	{ 0x3808, 0x0c, 0x00 },
	{ 0x3809, 0xc0, 0x00 },
	{ 0x380a, 0x09, 0x00 },
	{ 0x380b, 0x90, 0x00 },
	{ 0x380c, 0x04, 0x00 },
	{ 0x380d, 0x62, 0x00 },
	{ 0x380e, 0x0c, 0x00 },
	{ 0x380f, 0x78, 0x00 },
	{ 0x3810, 0x00, 0x00 },
	{ 0x3811, 0x10, 0x00 },
	{ 0x3812, 0x00, 0x00 },
	{ 0x3813, 0x07, 0x00 },
	{ 0x3814, 0x01, 0x00 },
	{ 0x3815, 0x01, 0x00 },
	{ 0x3816, 0x01, 0x00 },
	{ 0x3817, 0x01, 0x00 },
	{ 0x3820, 0xb0, 0x00 },
	{ 0x3821, 0x00, 0x00 },
	{ 0x3826, 0x11, 0x00 },
	{ 0x3827, 0x1c, 0x00 },
	{ 0x3829, 0x00, 0x00 },
	{ 0x4009, 0x0f, 0x00 },
	{ 0x4501, 0x00, 0x00 },
	{ 0x4837, 0x0e, 0x00 },
	{ 0x0100, 0x01, 0x00 },
};

static struct imgsensor_i2c_reg test_partern_on[] = {
	{ 0x5000, 0x81, 0x00 },
	{ 0x5080, 0x80, 0x00 },
};

static struct imgsensor_i2c_reg  test_partern_off[] = {
	{ 0x5000, 0xff, 0x00 },
	{ 0x5080, 0x00, 0x00 },
};

static struct imgsensor_i2c_reg_table dump_setting[] = {
	{ 0x0100, 0x0100, IMGSENSOR_I2C_WORD_DATA, IMGSENSOR_I2C_READ, 0 },
	{ 0x4848, 0x0000, IMGSENSOR_I2C_WORD_DATA, IMGSENSOR_I2C_READ, 0 },
	{ 0x3808, 0x1070, IMGSENSOR_I2C_WORD_DATA, IMGSENSOR_I2C_READ, 0 },
	{ 0x380a, 0x0c30, IMGSENSOR_I2C_WORD_DATA, IMGSENSOR_I2C_READ, 0 },
	{ 0x380c, 0x0460, IMGSENSOR_I2C_WORD_DATA, IMGSENSOR_I2C_READ, 0 },
	{ 0x380e, 0x0c8e, IMGSENSOR_I2C_WORD_DATA, IMGSENSOR_I2C_READ, 0 },
};

static struct imgsensor_i2c_reg normal_to_long_ready_setting[] = {
	{ 0x3208, 0x00, 0x00 },
	{ 0x3019, 0xf2, 0x00 },
	{ 0x3c80, 0x0c, 0x00 },
	{ 0x3c82, 0x00, 0x00 },
	{ 0x3c83, 0x7c, 0x00 },
	{ 0x3107, 0x23, 0x00 },
	{ 0x3c99, 0x03, 0x00 },
};

static struct imgsensor_i2c_reg normal_to_long_end_setting[] = {
	{ 0x380e, 0x0c, 0x00 },
	{ 0x380f, 0x90, 0x00 },
	{ 0x3500, 0x00, 0x00 },
	{ 0x3501, 0xc8, 0x00 },
	{ 0x3502, 0x60, 0x00 },
	{ 0x5203, 0x04, 0x00 },
	{ 0x5204, 0x00, 0x00 },
	{ 0x5205, 0x40, 0x00 },
	{ 0x520D, 0xf5, 0x00 },
	{ 0x520e, 0xf5, 0x00 },
	{ 0x5207, 0x84, 0x00 },
	{ 0x5208, 0xFF, 0x00 },
	{ 0x5201, 0x9c, 0x00 },
	{ 0x5200, 0x19, 0x00 },
	{ 0x5003, 0x04, 0x00 },
	{ 0x5006, 0x00, 0x00 },
	{ 0x5007, 0xF8, 0x00 },
	{ 0x5000, 0xED, 0x00 },
	{ 0x5001, 0x05, 0x00 },
	{ 0x3019, 0xf0, 0x00 },
	{ 0x3208, 0x10, 0x00 },
	{ 0x3208, 0x02, 0x00 },
	{ 0x3019, 0xf2, 0x00 },
	{ 0x3c80, 0x00, 0x00 },
	{ 0x3c82, 0x00, 0x00 },
	{ 0x3c83, 0xf9, 0x00 },
	{ 0x3107, 0x23, 0x00 },
	{ 0x3c99, 0x00, 0x00 },
	{ 0x3c9a, 0x00, 0x00 },
	{ 0x3c9b, 0x00, 0x00 },
	{ 0x3c9c, 0x00, 0x00 },
	{ 0x3c9d, 0x10, 0x00 },
	{ 0x380e, 0x0c, 0x00 },
	{ 0x380f, 0x8e, 0x00 },
	{ 0x3500, 0x00, 0x00 },
	{ 0x3501, 0x80, 0x00 },
	{ 0x3502, 0x00, 0x00 },
	{ 0x5203, 0x24, 0x00 },
	{ 0x5204, 0x12, 0x00 },
	{ 0x5205, 0x41, 0x00 },
	{ 0x520D, 0x0f, 0x00 },
	{ 0x520e, 0xfd, 0x00 },
	{ 0x5207, 0x84, 0x00 },
	{ 0x5208, 0x40, 0x00 },
	{ 0x5201, 0x94, 0x00 },
	{ 0x5200, 0x1b, 0x00 },
	{ 0x5003, 0x00, 0x00 },
	{ 0x5006, 0x00, 0x00 },
	{ 0x5007, 0x10, 0x00 },
	{ 0x5000, 0xff, 0x00 },
	{ 0x5001, 0x07, 0x00 },
	{ 0x3019, 0xf0, 0x00 },
	{ 0x3208, 0x12, 0x00 },
	{ 0x3209, 0x41, 0x00 },
	{ 0x320b, 0x80, 0x00 },
	{ 0x3208, 0xa0, 0x00 },
};

struct imgsensor_i2c_reg_setting tdk_normal_to_long_ready_settings = {
	.setting = normal_to_long_ready_setting,
	.size = IMGSENSOR_ARRAY_SIZE(normal_to_long_ready_setting),
	.addr_type = IMGSENSOR_I2C_WORD_ADDR,
	.data_type = IMGSENSOR_I2C_BYTE_DATA,
	.delay = 0,
};

struct imgsensor_i2c_reg_setting tdk_normal_to_long_end_settings = {
	.setting = normal_to_long_end_setting,
	.size = IMGSENSOR_ARRAY_SIZE(normal_to_long_end_setting),
	.addr_type = IMGSENSOR_I2C_WORD_ADDR,
	.data_type = IMGSENSOR_I2C_BYTE_DATA,
	.delay = 0,
};

static struct imgsensor_info_t imgsensor_info = {
	.sensor_id_reg = 0x300B,
	.sensor_id = OV13855_OFILM_TDK_SENSOR_ID,
	.checksum_value = 0x8b86a64,

	.pre = {
		.pclk = 108000000,
		.linelength = 1122,
		.framelength = 3176,
		.startx = 0,
		.starty = 0,
		.grabwindow_width = 2112,
		.grabwindow_height = 1568,
		/*
		 * following for MIPIDataLowPwr2HighSpeedSettleDelayCount by
		 * different scenario
		 */
		.mipi_data_lp2hs_settle_dc = 85,
		/* following for GetDefaultFramerateByScenario() */
		.max_framerate = 303,
		.mipi_pixel_rate = 216000000,
	},

	.cap = {
		.pclk = 108000000,
		.linelength = 1122,
		.framelength = 3192,
		.startx = 0,
		.starty = 0,
		.grabwindow_width = 4224,
		.grabwindow_height = 3136,
		/*
		 * following for MIPIDataLowPwr2HighSpeedSettleDelayCount by
		 * different scenario
		 */
		.mipi_data_lp2hs_settle_dc = 85,
		/* following for GetDefaultFramerateByScenario() */
		.max_framerate = 301,
		.mipi_pixel_rate = 444800000,
	},

	.normal_video = {
		.pclk = 108000000,
		.linelength = 1122,
		.framelength = 3192,
		.startx = 0,
		.starty = 0,
		.grabwindow_width = 4224,
		.grabwindow_height = 3136,
		/*
		 * following for MIPIDataLowPwr2HighSpeedSettleDelayCount by
		 * different scenario
		 */
		.mipi_data_lp2hs_settle_dc = 85,
		/* following for GetDefaultFramerateByScenario() */
		.max_framerate = 301,
		.mipi_pixel_rate = 444800000,
	},
	.hs_video = {
		.pclk = 108000000,
		.linelength = 1122,
		.framelength = 3192,
		.startx = 0,
		.starty = 0,
		.grabwindow_width = 4224,
		.grabwindow_height = 3136,
		/*
		 * following for MIPIDataLowPwr2HighSpeedSettleDelayCount by
		 * different scenario
		 */
		.mipi_data_lp2hs_settle_dc = 85,
		/* following for GetDefaultFramerateByScenario() */
		.max_framerate = 301,
		.mipi_pixel_rate = 444800000,
	},
	.slim_video = {
		.pclk = 108000000,
		.linelength = 1122,
		.framelength = 3192,
		.startx = 0,
		.starty = 0,
		.grabwindow_width = 4224,
		.grabwindow_height = 3136,
		/*
		 * following for MIPIDataLowPwr2HighSpeedSettleDelayCount by
		 * different scenario
		 */
		.mipi_data_lp2hs_settle_dc = 85,
		/* following for GetDefaultFramerateByScenario() */
		.max_framerate = 301,
		.mipi_pixel_rate = 444800000,
	},
	.custom1 = {
		.pclk = 108000000,
		.linelength = 1122,
		.framelength = 3192,
		.startx = 0,
		.starty = 0,
		.grabwindow_width = 3264,
		.grabwindow_height = 2448,
		/*
		 * following for MIPIDataLowPwr2HighSpeedSettleDelayCount by
		 * different scenario
		 */
		.mipi_data_lp2hs_settle_dc = 85,
		/* following for GetDefaultFramerateByScenario() */
		.max_framerate = 301,
		.mipi_pixel_rate = 444800000,
	},
	.init_setting = {
		.setting = init_setting,
		.size = IMGSENSOR_ARRAY_SIZE(init_setting),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 10,
	},
	.pre_setting = {
		.setting = preview_setting,
		.size = IMGSENSOR_ARRAY_SIZE(preview_setting),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 0,
	},
	.cap_setting = {
		.setting = capture_setting,
		.size = IMGSENSOR_ARRAY_SIZE(capture_setting),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 0,
	},
	.normal_video_setting = {
		.setting = video_setting,
		.size = IMGSENSOR_ARRAY_SIZE(video_setting),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 0,
	},
	.hs_video_setting = {
		.setting = hsvideo_setting,
		.size = IMGSENSOR_ARRAY_SIZE(hsvideo_setting),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 0,
	},
	.slim_setting = {
		.setting = lsvideo_setting,
		.size = IMGSENSOR_ARRAY_SIZE(lsvideo_setting),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 0,
	},
	.custom1_setting = {
		.setting = cust1_setting,
		.size = IMGSENSOR_ARRAY_SIZE(cust1_setting),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 0,
	},
	.streamon_setting = {
		.setting = stream_on,
		.size = IMGSENSOR_ARRAY_SIZE(stream_on),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 0,
	},

	.streamoff_setting = {
		.setting = stream_off,
		.size = IMGSENSOR_ARRAY_SIZE(stream_off),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 0,
	},

	.test_pattern_on_setting = {
		.setting = test_partern_on,
		.size = IMGSENSOR_ARRAY_SIZE(test_partern_on),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 0,
	},

	.test_pattern_off_setting = {
		.setting = test_partern_off,
		.size = IMGSENSOR_ARRAY_SIZE(test_partern_off),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 0,
	},

	.dump_info = {
		.setting = dump_setting,
		.size = IMGSENSOR_ARRAY_SIZE(dump_setting),
	},

	.margin = 8,
	.min_shutter = 4,
	.max_frame_length = 0x7FFF,
	.ae_shut_delay_frame = 0,
	.ae_sensor_gain_delay_frame = 0,
	.ae_ispGain_delay_frame = 2,
	.ihdr_support = 0,
	.ihdr_le_firstline = 0,
	.sensor_mode_num = 6,

	.cap_delay_frame = 3,
	.pre_delay_frame = 2,
	.video_delay_frame = 2,
	.hs_video_delay_frame = 0,
	.slim_video_delay_frame = 0,
	.custom1_delay_frame = 3,
	.isp_driving_current = ISP_DRIVING_4MA,
	.sensor_interface_type = SENSOR_INTERFACE_TYPE_MIPI,
	.mipi_sensor_type = MIPI_OPHY_NCSI2,
	.mipi_settle_delay_mode = 1,
	/* first pixel color */
	.sensor_output_dataformat = SENSOR_OUTPUT_FORMAT_RAW_B,
	.mclk = 24,
	.mipi_lane_num = SENSOR_MIPI_4_LANE,
	.i2c_addr_table = { 0x6c, 0xff },
	.i2c_speed = 400,
	.addr_type = IMGSENSOR_I2C_WORD_ADDR,
};

static struct imgsensor_t imgsensor = {
	.mirror = IMAGE_NORMAL,
	.sensor_mode = IMGSENSOR_MODE_INIT,
	.shutter = 0x03D0,
	.gain = 0x0100,
	.dummy_pixel = 0,
	.dummy_line = 0,
	.current_fps = 30,
	.autoflicker_en = KAL_FALSE,
	.test_pattern = KAL_FALSE,
	.current_scenario_id = MSDK_SCENARIO_ID_CAMERA_PREVIEW,
	.ihdr_en = KAL_FALSE,
	.i2c_write_id = 0x6c,
};

/* Sensor output window information */
static struct SENSOR_WINSIZE_INFO_STRUCT imgsensor_winsize_info[] = {
	{	/* preview */
		.full_w = 4224,
		.full_h = 3136,
		.x0_offset = 0,
		.y0_offset = 0,
		.w0_size = 4224,
		.h0_size = 3136,
		.scale_w = 2112,
		.scale_h = 1568,
		.x1_offset = 0,
		.y1_offset = 0,
		.w1_size = 2112,
		.h1_size = 1568,
		.x2_tg_offset = 0,
		.y2_tg_offset = 0,
		.w2_tg_size = 2112,
		.h2_tg_size = 1568,
	}, { /* capture */
		.full_w = 4224,
		.full_h = 3136,
		.x0_offset = 0,
		.y0_offset = 0,
		.w0_size = 4224,
		.h0_size = 3136,
		.scale_w = 4224,
		.scale_h = 3136,
		.x1_offset = 0,
		.y1_offset = 0,
		.w1_size = 4224,
		.h1_size = 3136,
		.x2_tg_offset = 0,
		.y2_tg_offset = 0,
		.w2_tg_size = 4224,
		.h2_tg_size = 3136,
	}, { /* video */
		.full_w = 4224,
		.full_h = 3136,
		.x0_offset = 0,
		.y0_offset = 0,
		.w0_size = 4224,
		.h0_size = 3136,
		.scale_w = 4224,
		.scale_h = 3136,
		.x1_offset = 0,
		.y1_offset = 0,
		.w1_size = 4224,
		.h1_size = 3136,
		.x2_tg_offset = 0,
		.y2_tg_offset = 0,
		.w2_tg_size = 4224,
		.h2_tg_size = 3136,
	}, { /* hs_video */
		.full_w = 4224,
		.full_h = 3136,
		.x0_offset = 0,
		.y0_offset = 0,
		.w0_size = 4224,
		.h0_size = 3136,
		.scale_w = 4224,
		.scale_h = 3136,
		.x1_offset = 0,
		.y1_offset = 0,
		.w1_size = 4224,
		.h1_size = 3136,
		.x2_tg_offset = 0,
		.y2_tg_offset = 0,
		.w2_tg_size = 4224,
		.h2_tg_size = 3136,
	}, { /* slim_video */
		.full_w = 4224,
		.full_h = 3136,
		.x0_offset = 0,
		.y0_offset = 0,
		.w0_size = 4224,
		.h0_size = 3136,
		.scale_w = 4224,
		.scale_h = 3136,
		.x1_offset = 0,
		.y1_offset = 0,
		.w1_size = 4224,
		.h1_size = 3136,
		.x2_tg_offset = 0,
		.y2_tg_offset = 0,
		.w2_tg_size = 4224,
		.h2_tg_size = 3136,
	}, { /* custom1 */
		.full_w = 3264,
		.full_h = 2448,
		.x0_offset = 0,
		.y0_offset = 0,
		.w0_size = 3264,
		.h0_size = 2448,
		.scale_w = 3264,
		.scale_h = 2448,
		.x1_offset = 0,
		.y1_offset = 0,
		.w1_size = 3264,
		.h1_size = 2448,
		.x2_tg_offset = 0,
		.y2_tg_offset = 0,
		.w2_tg_size = 3264,
		.h2_tg_size = 2448,
	},
};

static struct SET_PD_BLOCK_INFO_T imgsensor_pd_info = {
	.i4OffsetX = 0,
	.i4OffsetY = 0,
	.i4PitchX = 32,
	.i4PitchY = 32,
	.i4PairNum = 8,
	.i4SubBlkW = 16,
	.i4SubBlkH = 8,
	.i4PosL = {
		{ 10, 2 },
		{ 26, 2 },
		{ 2, 14 },
		{ 18, 14 },
		{ 10, 18 },
		{ 26, 18 },
		{ 2, 30 },
		{ 18, 30 },
	},
	.i4PosR = {
		{ 10, 6 },
		{ 26, 6 },
		{ 2, 10 },
		{ 18, 10 },
		{ 10, 22 },
		{ 26, 22 },
		{ 2, 26 },
		{ 18, 26 },
	},
	.i4BlockNumX = 132,
	.i4BlockNumY = 98,
	.iMirrorFlip = 0,
};

#endif
