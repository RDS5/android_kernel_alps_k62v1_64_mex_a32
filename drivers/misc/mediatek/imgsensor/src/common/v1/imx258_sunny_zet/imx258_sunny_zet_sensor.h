/*
 *  Copyright (C) 2018 Huawei Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 */
#ifndef _IMX258_SUNNY_ZET_H
#define _IMX258_SUNNY_ZET_H

#define SENSOR_GRP_PARAM_HOLD          0x0104
#define SENSOR_FRM_LENGTH_LINES_H      0x0340
#define SENSOR_LINE_LENGHT_PCK_H       0x0342
#define SENSOR_FRM_LENGHT_CTL_REG      0x0350
#define SENSOR_COARSE_INTEG_TIME_H     0x0202
#define SENSOR_ANA_GAIN_GLOBAL_H       0x0204
#define SENSOR_TEMP_SEN_CTL            0x0138
#define SENSOR_TEMP_SEN_OUT            0x013a
#define SENSOR_SENSOR_CTRL_REG_H       0x0A00
#define SENSOR_SENSOR_CTRL_REG_M       0x0A01
#define SENSOR_SENSOR_CTRL_REG_L       0x0A02
#define SENSOR_SENSOR_TYPE             0x0A2E
#define SENSOR_LONG_EXPO_REG           0x3002
#define IMX258_SUNNY_ZET_NOPDAF_TYPE	   0x30
#define IMX258_SUNNY_ZET_HDD_TYPE          0x40/* IMX258-0AUH5 */
#define SENSOR_MAX_SHIFT_NUM           7
#define SENSOR_GAIN_DEFAULT            0xe000
#define SENSOR_SHUTTER_INIT            0x3D0
#define IMX258MIPI_MaxGainIndex        154
#define EEPROM_LENS_TYPE_ADDR          0x06 /* LENS type addr in otp map.*/

kal_uint16 IMX258MIPI_zet_sensorGainMapping[IMX258MIPI_MaxGainIndex][2] = {
	{64, 0},
	{65, 8},
	{66, 16},
	{67, 25},
	{68, 30},
	{69, 37},
	{70, 45},
	{71, 51},
	{72, 57},
	{73, 63},
	{74, 67},
	{75, 75},
	{76, 81},
	{77, 85},
	{78, 92},
	{79, 96},
	{80, 103},
	{81, 107},
	{82, 112},
	{83, 118},
	{84, 122},
	{86, 133},
	{88, 140},
	{89, 144},
	{90, 148},
	{93, 159},
	{96, 171},
	{97, 175},
	{99, 182},
	{101, 188},
	{102, 192},
	{104, 197},
	{106, 202},
	{107, 206},
	{109, 211},
	{112, 220},
	{113, 222},
	{115, 228},
	{118, 235},
	{120, 239},
	{125, 250},
	{126, 252},
	{128, 256},
	{129, 258},
	{130, 260},
	{132, 264},
	{133, 266},
	{135, 269},
	{136, 271},
	{138, 274},
	{139, 276},
	{141, 279},
	{142, 282},
	{144, 285},
	{145, 286},
	{147, 290},
	{149, 292},
	{150, 294},
	{155, 300},
	{157, 303},
	{158, 305},
	{161, 309},
	{163, 311},
	{170, 319},
	{172, 322},
	{174, 324},
	{176, 326},
	{179, 329},
	{181, 331},
	{185, 335},
	{189, 339},
	{193, 342},
	{195, 344},
	{196, 345},
	{200, 348},
	{202, 350},
	{205, 352},
	{207, 354},
	{210, 356},
	{211, 357},
	{214, 359},
	{217, 361},
	{218, 362},
	{221, 364},
	{224, 366},
	{231, 370},
	{237, 374},
	{246, 379},
	{250, 381},
	{252, 382},
	{256, 384},
	{260, 386},
	{262, 387},
	{273, 392},
	{275, 393},
	{280, 395},
	{290, 399},
	{306, 405},
	{312, 407},
	{321, 410},
	{331, 413},
	{345, 417},
	{352, 419},
	{360, 421},
	{364, 422},
	{372, 424},
	{386, 427},
	{400, 430},
	{410, 432},
	{420, 434},
	{431, 436},
	{437, 437},
	{449, 439},
	{455, 440},
	{461, 441},
	{468, 442},
	{475, 443},
	{482, 444},
	{489, 445},
	{496, 446},
	{504, 447},
	{512, 448},
	{520, 449},
	{529, 450},
	{537, 451},
	{546, 452},
	{555, 453},
	{565, 454},
	{575, 455},
	{585, 456},
	{596, 457},
	{607, 458},
	{618, 459},
	{630, 460},
	{642, 461},
	{655, 462},
	{669, 463},
	{683, 464},
	{697, 465},
	{713, 466},
	{728, 467},
	{745, 468},
	{762, 469},
	{780, 470},
	{799, 471},
	{819, 472},
	{840, 473},
	{862, 474},
	{886, 475},
	{910, 476},
	{936, 477},
	{964, 478},
	{993, 479},
	{1024, 480}
};

static struct imgsensor_i2c_reg stream_on[] = {
	{0x0101, 0x03, 0x00},
	{0x0100, 0x01, 0x00},
};

static struct imgsensor_i2c_reg stream_off[] = {
	{0x0100, 0x00, 0x03},
};

static struct imgsensor_i2c_reg init_setting[] = {
	{0x0136, 0x18, 0x00},
	{0x0137, 0x00, 0x00},
	{0x3051, 0x00, 0x00},
	{0x6B11, 0xCF, 0x00},
	{0x7FF0, 0x08, 0x00},
	{0x7FF1, 0x0F, 0x00},
	{0x7FF2, 0x08, 0x00},
	{0x7FF3, 0x1B, 0x00},
	{0x7FF4, 0x23, 0x00},
	{0x7FF5, 0x60, 0x00},
	{0x7FF6, 0x00, 0x00},
	{0x7FF7, 0x01, 0x00},
	{0x7FF8, 0x00, 0x00},
	{0x7FF9, 0x78, 0x00},
	{0x7FFA, 0x01, 0x00},
	{0x7FFB, 0x00, 0x00},
	{0x7FFC, 0x00, 0x00},
	{0x7FFD, 0x00, 0x00},
	{0x7FFE, 0x00, 0x00},
	{0x7FFF, 0x03, 0x00},
	{0x7F76, 0x03, 0x00},
	{0x7F77, 0xFE, 0x00},
	{0x7FA8, 0x03, 0x00},
	{0x7FA9, 0xFE, 0x00},
	{0x7B24, 0x81, 0x00},
	{0x7B25, 0x01, 0x00},
	{0x6564, 0x07, 0x00},
	{0x6B0D, 0x41, 0x00},
	{0x653D, 0x04, 0x00},
	{0x6B05, 0x8C, 0x00},
	{0x6B06, 0xF9, 0x00},
	{0x6B08, 0x65, 0x00},
	{0x6B09, 0xFC, 0x00},
	{0x6B0A, 0xCF, 0x00},
	{0x6B0B, 0xD2, 0x00},
	{0x6700, 0x0E, 0x00},
	{0x6707, 0x0E, 0x00},
	{0x5F04, 0x00, 0x00},
	{0x5F05, 0xED, 0x00},
	{0x94C7, 0x00, 0x00},
	{0x94C8, 0x00, 0x00},
	{0x94C9, 0x00, 0x00},
	{0x95C7, 0x00, 0x00},
	{0x95C8, 0x00, 0x00},
	{0x95C9, 0x00, 0x00},
	{0x95C4, 0x2F, 0x00},
	{0x95C5, 0x2F, 0x00},
	{0x95C6, 0x2F, 0x00},
	{0x94C1, 0x00, 0x00},
	{0x94C2, 0x00, 0x00},
	{0x94C3, 0x00, 0x00},
	{0x95C1, 0x00, 0x00},
	{0x95C2, 0x00, 0x00},
	{0x95C3, 0x00, 0x00},
	{0x95BE, 0x0F, 0x00},
	{0x95BF, 0x0F, 0x00},
	{0x95C0, 0x0F, 0x00},
	{0x94D0, 0x74, 0x00},
	{0x94D1, 0x74, 0x00},
	{0x94D2, 0x74, 0x00},
	{0x95D0, 0x74, 0x00},
	{0x95D1, 0x74, 0x00},
	{0x95D2, 0x74, 0x00},
	{0x95CD, 0x30, 0x00},
	{0x95CE, 0x30, 0x00},
	{0x95CF, 0x30, 0x00},
	{0x95CA, 0x40, 0x00},
	{0x95CB, 0x40, 0x00},
	{0x95CC, 0x40, 0x00},
	{0x900E, 0x32, 0x00},
	{0x94E2, 0x80, 0x00},
	{0x94E3, 0x80, 0x00},
	{0x94E4, 0x80, 0x00},
	{0x95E2, 0x80, 0x00},
	{0x95E3, 0x80, 0x00},
	{0x95E4, 0x80, 0x00},
	{0x94DF, 0x6E, 0x00},
	{0x94E0, 0x6E, 0x00},
	{0x94E1, 0x6E, 0x00},
	{0x95DF, 0x2D, 0x00},
	{0x95E0, 0x2D, 0x00},
	{0x95E1, 0x2D, 0x00},
	{0x7FCC, 0x01, 0x00},
	{0x7B78, 0x00, 0x00},
	{0x9401, 0x35, 0x00},
	{0x9403, 0x23, 0x00},
	{0x9405, 0x23, 0x00},
	{0x9406, 0x00, 0x00},
	{0x9407, 0x31, 0x00},
	{0x9408, 0x00, 0x00},
	{0x9409, 0x1B, 0x00},
	{0x940A, 0x00, 0x00},
	{0x940B, 0x15, 0x00},
	{0x940D, 0x3F, 0x00},
	{0x940F, 0x3F, 0x00},
	{0x9411, 0x3F, 0x00},
	{0x9413, 0x64, 0x00},
	{0x9415, 0x64, 0x00},
	{0x9417, 0x64, 0x00},
	{0x941D, 0x34, 0x00},
	{0x941F, 0x01, 0x00},
	{0x9421, 0x01, 0x00},
	{0x9423, 0x01, 0x00},
	{0x9425, 0x23, 0x00},
	{0x9427, 0x23, 0x00},
	{0x9429, 0x23, 0x00},
	{0x942B, 0x2F, 0x00},
	{0x942D, 0x1A, 0x00},
	{0x942F, 0x14, 0x00},
	{0x9431, 0x3F, 0x00},
	{0x9433, 0x3F, 0x00},
	{0x9435, 0x3F, 0x00},
	{0x9437, 0x6B, 0x00},
	{0x9439, 0x7C, 0x00},
	{0x943B, 0x81, 0x00},
	{0x9443, 0x0F, 0x00},
	{0x9445, 0x0F, 0x00},
	{0x9447, 0x0F, 0x00},
	{0x9449, 0x0F, 0x00},
	{0x944B, 0x0F, 0x00},
	{0x944D, 0x0F, 0x00},
	{0x944F, 0x1E, 0x00},
	{0x9451, 0x0F, 0x00},
	{0x9453, 0x0B, 0x00},
	{0x9455, 0x28, 0x00},
	{0x9457, 0x13, 0x00},
	{0x9459, 0x0C, 0x00},
	{0x945D, 0x00, 0x00},
	{0x945E, 0x00, 0x00},
	{0x945F, 0x00, 0x00},
	{0x946D, 0x00, 0x00},
	{0x946F, 0x10, 0x00},
	{0x9471, 0x10, 0x00},
	{0x9473, 0x40, 0x00},
	{0x9475, 0x2E, 0x00},
	{0x9477, 0x10, 0x00},
	{0x9478, 0x0A, 0x00},
	{0x947B, 0xE0, 0x00},
	{0x947C, 0xE0, 0x00},
	{0x947D, 0xE0, 0x00},
	{0x947E, 0xE0, 0x00},
	{0x947F, 0xE0, 0x00},
	{0x9480, 0xE0, 0x00},
	{0x9483, 0x14, 0x00},
	{0x9485, 0x14, 0x00},
	{0x9487, 0x14, 0x00},
	{0x9501, 0x35, 0x00},
	{0x9503, 0x14, 0x00},
	{0x9505, 0x14, 0x00},
	{0x9507, 0x31, 0x00},
	{0x9509, 0x1B, 0x00},
	{0x950B, 0x15, 0x00},
	{0x950D, 0x1E, 0x00},
	{0x950F, 0x1E, 0x00},
	{0x9511, 0x1E, 0x00},
	{0x9513, 0x64, 0x00},
	{0x9515, 0x64, 0x00},
	{0x9517, 0x64, 0x00},
	{0x951D, 0x34, 0x00},
	{0x951F, 0x01, 0x00},
	{0x9521, 0x01, 0x00},
	{0x9523, 0x01, 0x00},
	{0x9525, 0x14, 0x00},
	{0x9527, 0x14, 0x00},
	{0x9529, 0x14, 0x00},
	{0x952B, 0x2F, 0x00},
	{0x952D, 0x1A, 0x00},
	{0x952F, 0x14, 0x00},
	{0x9531, 0x1E, 0x00},
	{0x9533, 0x1E, 0x00},
	{0x9535, 0x1E, 0x00},
	{0x9537, 0x6B, 0x00},
	{0x9539, 0x7C, 0x00},
	{0x953B, 0x81, 0x00},
	{0x9543, 0x0F, 0x00},
	{0x9545, 0x0F, 0x00},
	{0x9547, 0x0F, 0x00},
	{0x9549, 0x0F, 0x00},
	{0x954B, 0x0F, 0x00},
	{0x954D, 0x0F, 0x00},
	{0x954F, 0x15, 0x00},
	{0x9551, 0x0B, 0x00},
	{0x9553, 0x08, 0x00},
	{0x9555, 0x1C, 0x00},
	{0x9557, 0x0D, 0x00},
	{0x9559, 0x08, 0x00},
	{0x955D, 0x00, 0x00},
	{0x955E, 0x00, 0x00},
	{0x955F, 0x00, 0x00},
	{0x956D, 0x00, 0x00},
	{0x956F, 0x10, 0x00},
	{0x9571, 0x10, 0x00},
	{0x9573, 0x40, 0x00},
	{0x9575, 0x2E, 0x00},
	{0x9577, 0x10, 0x00},
	{0x9578, 0x0A, 0x00},
	{0x957B, 0xE0, 0x00},
	{0x957C, 0xE0, 0x00},
	{0x957D, 0xE0, 0x00},
	{0x957E, 0xE0, 0x00},
	{0x957F, 0xE0, 0x00},
	{0x9580, 0xE0, 0x00},
	{0x9583, 0x14, 0x00},
	{0x9585, 0x14, 0x00},
	{0x9587, 0x14, 0x00},
	{0x7F78, 0x00, 0x00},
	{0x7F89, 0x00, 0x00},
	{0x7F93, 0x00, 0x00},
	{0x924B, 0x1B, 0x00},
	{0x924C, 0x0A, 0x00},
	{0x9304, 0x04, 0x00},
	{0x9315, 0x04, 0x00},
	{0x9250, 0x50, 0x00},
	{0x9251, 0x3C, 0x00},
	{0x9252, 0x14, 0x00},
	{0xD000, 0x00, 0x00},
	{0xD001, 0x18, 0x00},
	{0xD002, 0x00, 0x00},
	{0xD003, 0x18, 0x00},
	{0xD004, 0x10, 0x00},
	{0xD005, 0x57, 0x00},
	{0xD006, 0x0C, 0x00},
	{0xD007, 0x17, 0x00},
	{0xD00A, 0x01, 0x00},
	{0xD00B, 0x02, 0x00},
	{0xD00D, 0x02, 0x00},
	{0xD00E, 0x05, 0x00},
	{0xD00F, 0x01, 0x00},
	{0xD011, 0x02, 0x00},
	{0xD012, 0x09, 0x00},
	{0xD013, 0x02, 0x00},
	{0xD015, 0x0A, 0x00},
	{0xD016, 0x05, 0x00},
	{0xD017, 0x01, 0x00},
	{0xD019, 0x0A, 0x00},
	{0xD01A, 0x09, 0x00},
	{0xD01B, 0x02, 0x00},
	{0xD01D, 0x06, 0x00},
	{0xD01E, 0x15, 0x00},
	{0xD01F, 0x01, 0x00},
	{0xD021, 0x06, 0x00},
	{0xD022, 0x19, 0x00},
	{0xD023, 0x02, 0x00},
	{0xD025, 0x0E, 0x00},
	{0xD026, 0x15, 0x00},
	{0xD027, 0x01, 0x00},
	{0xD029, 0x0E, 0x00},
	{0xD02A, 0x19, 0x00},
	{0xD02B, 0x02, 0x00},
};

static struct imgsensor_i2c_reg preview_setting[] = {
	{0x0112, 0x0A, 0x00},
	{0x0113, 0x0A, 0x00},
	{0x0114, 0x03, 0x00},
	{0x0301, 0x05, 0x00},
	{0x0303, 0x02, 0x00},
	{0x0305, 0x04, 0x00},
	{0x0306, 0x00, 0x00},
	{0x0307, 0xD3, 0x00},
	{0x0309, 0x0A, 0x00},
	{0x030B, 0x01, 0x00},
	{0x030D, 0x02, 0x00},
	{0x030E, 0x00, 0x00},
	{0x030F, 0xD8, 0x00},
	{0x0310, 0x00, 0x00},
	{0x0820, 0x13, 0x00},
	{0x0821, 0xC8, 0x00},
	{0x0822, 0x00, 0x00},
	{0x0823, 0x00, 0x00},
	{0x4648, 0x7F, 0x00},
	{0x7420, 0x00, 0x00},
	{0x7421, 0x1C, 0x00},
	{0x7422, 0x00, 0x00},
	{0x7423, 0xD7, 0x00},
	{0x9104, 0x00, 0x00},
	{0x0342, 0x14, 0x00},
	{0x0343, 0xE8, 0x00},
	{0x0340, 0x0C, 0x00},
	{0x0341, 0x30, 0x00},
	{0x0344, 0x00, 0x00},
	{0x0345, 0x00, 0x00},
	{0x0346, 0x00, 0x00},
	{0x0347, 0x00, 0x00},
	{0x0348, 0x10, 0x00},
	{0x0349, 0x6F, 0x00},
	{0x034A, 0x0C, 0x00},
	{0x034B, 0x2F, 0x00},
	{0x0381, 0x01, 0x00},
	{0x0383, 0x01, 0x00},
	{0x0385, 0x01, 0x00},
	{0x0387, 0x01, 0x00},
	{0x0900, 0x01, 0x00},
	{0x0901, 0x12, 0x00},
	{0x0401, 0x01, 0x00},
	{0x0404, 0x00, 0x00},
	{0x0405, 0x20, 0x00},
	{0x0408, 0x00, 0x00},
	{0x0409, 0x02, 0x00},
	{0x040A, 0x00, 0x00},
	{0x040B, 0x00, 0x00},
	{0x040C, 0x10, 0x00},
	{0x040D, 0x6A, 0x00},
	{0x040E, 0x06, 0x00},
	{0x040F, 0x18, 0x00},
	{0x3038, 0x00, 0x00},
	{0x303A, 0x00, 0x00},
	{0x303B, 0x10, 0x00},
	{0x300D, 0x00, 0x00},
	{0x034C, 0x08, 0x00},
	{0x034D, 0x34, 0x00},
	{0x034E, 0x06, 0x00},
	{0x034F, 0x18, 0x00},
	{0x0202, 0x0C, 0x00},
	{0x0203, 0x26, 0x00},
	{0x0204, 0x00, 0x00},
	{0x0205, 0x00, 0x00},
	{0x020E, 0x01, 0x00},
	{0x020F, 0x00, 0x00},
	{0x0210, 0x01, 0x00},
	{0x0211, 0x00, 0x00},
	{0x0212, 0x01, 0x00},
	{0x0213, 0x00, 0x00},
	{0x0214, 0x01, 0x00},
	{0x0215, 0x00, 0x00},
	{0x7BCD, 0x01, 0x00},
	{0x94DC, 0x20, 0x00},
	{0x94DD, 0x20, 0x00},
	{0x94DE, 0x20, 0x00},
	{0x95DC, 0x20, 0x00},
	{0x95DD, 0x20, 0x00},
	{0x95DE, 0x20, 0x00},
	{0x7FB0, 0x00, 0x00},
	{0x9010, 0x3E, 0x00},
	{0x9419, 0x50, 0x00},
	{0x941B, 0x50, 0x00},
	{0x9519, 0x50, 0x00},
	{0x951B, 0x50, 0x00},
	{0x7FB4, 0x00, 0x00},
	{0x94BE, 0x0C, 0x00},
	{0x94BF, 0x0C, 0x00},
	{0x94C0, 0x0C, 0x00},
	{0x94C4, 0x3F, 0x00},
	{0x94C5, 0x3F, 0x00},
	{0x94C6, 0x3F, 0x00},
	{0x94CA, 0x4C, 0x00},
	{0x94CB, 0x4C, 0x00},
	{0x94CC, 0x4C, 0x00},
	{0x94CD, 0x2E, 0x00},
	{0x94CE, 0x2E, 0x00},
	{0x94CF, 0x2E, 0x00},
	{0x3030, 0x00, 0x00},
	{0x3032, 0x00, 0x00},
	{0x0220, 0x00, 0x00},
};

static struct imgsensor_i2c_reg capture_setting[] = {
	{0x0112, 0x0A, 0x00},
	{0x0113, 0x0A, 0x00},
	{0x0114, 0x03, 0x00},
	{0x0301, 0x05, 0x00},
	{0x0303, 0x02, 0x00},
	{0x0305, 0x04, 0x00},
	{0x0306, 0x00, 0x00},
	{0x0307, 0xD6, 0x00},
	{0x0309, 0x0A, 0x00},
	{0x030B, 0x01, 0x00},
	{0x030D, 0x04, 0x00},
	{0x030E, 0x00, 0x00},
	{0x030F, 0xD3, 0x00},
	{0x0310, 0x01, 0x00},
	{0x0820, 0x13, 0x00},
	{0x0821, 0xC8, 0x00},
	{0x0822, 0x00, 0x00},
	{0x0823, 0x00, 0x00},
	{0x4648, 0x7F, 0x00},
	{0x7420, 0x00, 0x00},
	{0x7421, 0x5C, 0x00},
	{0x7422, 0x00, 0x00},
	{0x7423, 0xD7, 0x00},
	{0x9104, 0x04, 0x00},
	{0x0342, 0x14, 0x00},
	{0x0343, 0xE8, 0x00},
	{0x0340, 0x0C, 0x00},
	{0x0341, 0x9C, 0x00},
	{0x0344, 0x00, 0x00},
	{0x0345, 0x00, 0x00},
	{0x0346, 0x00, 0x00},
	{0x0347, 0x00, 0x00},
	{0x0348, 0x10, 0x00},
	{0x0349, 0x6F, 0x00},
	{0x034A, 0x0C, 0x00},
	{0x034B, 0x2F, 0x00},
	{0x0381, 0x01, 0x00},
	{0x0383, 0x01, 0x00},
	{0x0385, 0x01, 0x00},
	{0x0387, 0x01, 0x00},
	{0x0900, 0x00, 0x00},
	{0x0901, 0x11, 0x00},
	{0x0401, 0x00, 0x00},
	{0x0404, 0x00, 0x00},
	{0x0405, 0x10, 0x00},
	{0x0408, 0x00, 0x00},
	{0x0409, 0x00, 0x00},
	{0x040A, 0x00, 0x00},
	{0x040B, 0x00, 0x00},
	{0x040C, 0x10, 0x00},
	{0x040D, 0x70, 0x00},
	{0x040E, 0x0C, 0x00},
	{0x040F, 0x30, 0x00},
	{0x3038, 0x00, 0x00},
	{0x303A, 0x00, 0x00},
	{0x303B, 0x10, 0x00},
	{0x300D, 0x00, 0x00},
	{0x034C, 0x10, 0x00},
	{0x034D, 0x70, 0x00},
	{0x034E, 0x0C, 0x00},
	{0x034F, 0x30, 0x00},
	{0x0202, 0x0C, 0x00},
	{0x0203, 0x92, 0x00},
	{0x0204, 0x00, 0x00},
	{0x0205, 0x00, 0x00},
	{0x020E, 0x01, 0x00},
	{0x020F, 0x00, 0x00},
	{0x0210, 0x01, 0x00},
	{0x0211, 0x00, 0x00},
	{0x0212, 0x01, 0x00},
	{0x0213, 0x00, 0x00},
	{0x0214, 0x01, 0x00},
	{0x0215, 0x00, 0x00},
	{0x7BCD, 0x00, 0x00},
	{0x94DC, 0x20, 0x00},
	{0x94DD, 0x20, 0x00},
	{0x94DE, 0x20, 0x00},
	{0x95DC, 0x20, 0x00},
	{0x95DD, 0x20, 0x00},
	{0x95DE, 0x20, 0x00},
	{0x7FB0, 0x00, 0x00},
	{0x9010, 0x3E, 0x00},
	{0x9419, 0x50, 0x00},
	{0x941B, 0x50, 0x00},
	{0x9519, 0x50, 0x00},
	{0x951B, 0x50, 0x00},
	{0x7FB4, 0x02, 0x00},
	{0x94BE, 0x3F, 0x00},
	{0x94BF, 0x3F, 0x00},
	{0x94C0, 0x3F, 0x00},
	{0x94C4, 0x3F, 0x00},
	{0x94C5, 0x3F, 0x00},
	{0x94C6, 0x3F, 0x00},
	{0x94CA, 0x40, 0x00},
	{0x94CB, 0x40, 0x00},
	{0x94CC, 0x40, 0x00},
	{0x94CD, 0x30, 0x00},
	{0x94CE, 0x30, 0x00},
	{0x94CF, 0x30, 0x00},
	{0x3030, 0x01, 0x00},
	{0x3032, 0x01, 0x00},
	{0x0220, 0x00, 0x00},
};

static struct imgsensor_i2c_reg video_setting[] = {
	{0x0112, 0x0A, 0x00},
	{0x0113, 0x0A, 0x00},
	{0x0114, 0x03, 0x00},
	{0x0301, 0x05, 0x00},
	{0x0303, 0x02, 0x00},
	{0x0305, 0x04, 0x00},
	{0x0306, 0x00, 0x00},
	{0x0307, 0xD6, 0x00},
	{0x0309, 0x0A, 0x00},
	{0x030B, 0x01, 0x00},
	{0x030D, 0x04, 0x00},
	{0x030E, 0x00, 0x00},
	{0x030F, 0xD3, 0x00},
	{0x0310, 0x01, 0x00},
	{0x0820, 0x13, 0x00},
	{0x0821, 0xC8, 0x00},
	{0x0822, 0x00, 0x00},
	{0x0823, 0x00, 0x00},
	{0x4648, 0x7F, 0x00},
	{0x7420, 0x00, 0x00},
	{0x7421, 0x5C, 0x00},
	{0x7422, 0x00, 0x00},
	{0x7423, 0xD7, 0x00},
	{0x9104, 0x04, 0x00},
	{0x0342, 0x14, 0x00},
	{0x0343, 0xE8, 0x00},
	{0x0340, 0x0C, 0x00},
	{0x0341, 0x9C, 0x00},
	{0x0344, 0x00, 0x00},
	{0x0345, 0x00, 0x00},
	{0x0346, 0x00, 0x00},
	{0x0347, 0x00, 0x00},
	{0x0348, 0x10, 0x00},
	{0x0349, 0x6F, 0x00},
	{0x034A, 0x0C, 0x00},
	{0x034B, 0x2F, 0x00},
	{0x0381, 0x01, 0x00},
	{0x0383, 0x01, 0x00},
	{0x0385, 0x01, 0x00},
	{0x0387, 0x01, 0x00},
	{0x0900, 0x00, 0x00},
	{0x0901, 0x11, 0x00},
	{0x0401, 0x00, 0x00},
	{0x0404, 0x00, 0x00},
	{0x0405, 0x10, 0x00},
	{0x0408, 0x00, 0x00},
	{0x0409, 0x00, 0x00},
	{0x040A, 0x00, 0x00},
	{0x040B, 0x00, 0x00},
	{0x040C, 0x10, 0x00},
	{0x040D, 0x70, 0x00},
	{0x040E, 0x0C, 0x00},
	{0x040F, 0x30, 0x00},
	{0x3038, 0x00, 0x00},
	{0x303A, 0x00, 0x00},
	{0x303B, 0x10, 0x00},
	{0x300D, 0x00, 0x00},
	{0x034C, 0x10, 0x00},
	{0x034D, 0x70, 0x00},
	{0x034E, 0x0C, 0x00},
	{0x034F, 0x30, 0x00},
	{0x0202, 0x0C, 0x00},
	{0x0203, 0x92, 0x00},
	{0x0204, 0x00, 0x00},
	{0x0205, 0x00, 0x00},
	{0x020E, 0x01, 0x00},
	{0x020F, 0x00, 0x00},
	{0x0210, 0x01, 0x00},
	{0x0211, 0x00, 0x00},
	{0x0212, 0x01, 0x00},
	{0x0213, 0x00, 0x00},
	{0x0214, 0x01, 0x00},
	{0x0215, 0x00, 0x00},
	{0x7BCD, 0x00, 0x00},
	{0x94DC, 0x20, 0x00},
	{0x94DD, 0x20, 0x00},
	{0x94DE, 0x20, 0x00},
	{0x95DC, 0x20, 0x00},
	{0x95DD, 0x20, 0x00},
	{0x95DE, 0x20, 0x00},
	{0x7FB0, 0x00, 0x00},
	{0x9010, 0x3E, 0x00},
	{0x9419, 0x50, 0x00},
	{0x941B, 0x50, 0x00},
	{0x9519, 0x50, 0x00},
	{0x951B, 0x50, 0x00},
	{0x7FB4, 0x02, 0x00},
	{0x94BE, 0x3F, 0x00},
	{0x94BF, 0x3F, 0x00},
	{0x94C0, 0x3F, 0x00},
	{0x94C4, 0x3F, 0x00},
	{0x94C5, 0x3F, 0x00},
	{0x94C6, 0x3F, 0x00},
	{0x94CA, 0x40, 0x00},
	{0x94CB, 0x40, 0x00},
	{0x94CC, 0x40, 0x00},
	{0x94CD, 0x30, 0x00},
	{0x94CE, 0x30, 0x00},
	{0x94CF, 0x30, 0x00},
	{0x3030, 0x01, 0x00},
	{0x3032, 0x01, 0x00},
	{0x0220, 0x00, 0x00},
};

static struct imgsensor_i2c_reg hsvideo_setting[] = {
	{0x0112, 0x0A, 0x00},
	{0x0113, 0x0A, 0x00},
	{0x0114, 0x03, 0x00},
	{0x0301, 0x05, 0x00},
	{0x0303, 0x02, 0x00},
	{0x0305, 0x04, 0x00},
	{0x0306, 0x00, 0x00},
	{0x0307, 0xD6, 0x00},
	{0x0309, 0x0A, 0x00},
	{0x030B, 0x01, 0x00},
	{0x030D, 0x04, 0x00},
	{0x030E, 0x00, 0x00},
	{0x030F, 0xD3, 0x00},
	{0x0310, 0x01, 0x00},
	{0x0820, 0x13, 0x00},
	{0x0821, 0xC8, 0x00},
	{0x0822, 0x00, 0x00},
	{0x0823, 0x00, 0x00},
	{0x4648, 0x7F, 0x00},
	{0x7420, 0x00, 0x00},
	{0x7421, 0x5C, 0x00},
	{0x7422, 0x00, 0x00},
	{0x7423, 0xD7, 0x00},
	{0x9104, 0x04, 0x00},
	{0x0342, 0x14, 0x00},
	{0x0343, 0xE8, 0x00},
	{0x0340, 0x0C, 0x00},
	{0x0341, 0x9C, 0x00},
	{0x0344, 0x00, 0x00},
	{0x0345, 0x00, 0x00},
	{0x0346, 0x00, 0x00},
	{0x0347, 0x00, 0x00},
	{0x0348, 0x10, 0x00},
	{0x0349, 0x6F, 0x00},
	{0x034A, 0x0C, 0x00},
	{0x034B, 0x2F, 0x00},
	{0x0381, 0x01, 0x00},
	{0x0383, 0x01, 0x00},
	{0x0385, 0x01, 0x00},
	{0x0387, 0x01, 0x00},
	{0x0900, 0x00, 0x00},
	{0x0901, 0x11, 0x00},
	{0x0401, 0x00, 0x00},
	{0x0404, 0x00, 0x00},
	{0x0405, 0x10, 0x00},
	{0x0408, 0x00, 0x00},
	{0x0409, 0x00, 0x00},
	{0x040A, 0x00, 0x00},
	{0x040B, 0x00, 0x00},
	{0x040C, 0x10, 0x00},
	{0x040D, 0x70, 0x00},
	{0x040E, 0x0C, 0x00},
	{0x040F, 0x30, 0x00},
	{0x3038, 0x00, 0x00},
	{0x303A, 0x00, 0x00},
	{0x303B, 0x10, 0x00},
	{0x300D, 0x00, 0x00},
	{0x034C, 0x10, 0x00},
	{0x034D, 0x70, 0x00},
	{0x034E, 0x0C, 0x00},
	{0x034F, 0x30, 0x00},
	{0x0202, 0x0C, 0x00},
	{0x0203, 0x92, 0x00},
	{0x0204, 0x00, 0x00},
	{0x0205, 0x00, 0x00},
	{0x020E, 0x01, 0x00},
	{0x020F, 0x00, 0x00},
	{0x0210, 0x01, 0x00},
	{0x0211, 0x00, 0x00},
	{0x0212, 0x01, 0x00},
	{0x0213, 0x00, 0x00},
	{0x0214, 0x01, 0x00},
	{0x0215, 0x00, 0x00},
	{0x7BCD, 0x00, 0x00},
	{0x94DC, 0x20, 0x00},
	{0x94DD, 0x20, 0x00},
	{0x94DE, 0x20, 0x00},
	{0x95DC, 0x20, 0x00},
	{0x95DD, 0x20, 0x00},
	{0x95DE, 0x20, 0x00},
	{0x7FB0, 0x00, 0x00},
	{0x9010, 0x3E, 0x00},
	{0x9419, 0x50, 0x00},
	{0x941B, 0x50, 0x00},
	{0x9519, 0x50, 0x00},
	{0x951B, 0x50, 0x00},
	{0x7FB4, 0x02, 0x00},
	{0x94BE, 0x3F, 0x00},
	{0x94BF, 0x3F, 0x00},
	{0x94C0, 0x3F, 0x00},
	{0x94C4, 0x3F, 0x00},
	{0x94C5, 0x3F, 0x00},
	{0x94C6, 0x3F, 0x00},
	{0x94CA, 0x40, 0x00},
	{0x94CB, 0x40, 0x00},
	{0x94CC, 0x40, 0x00},
	{0x94CD, 0x30, 0x00},
	{0x94CE, 0x30, 0x00},
	{0x94CF, 0x30, 0x00},
	{0x3030, 0x00, 0x00},
	{0x3032, 0x00, 0x00},
	{0x0220, 0x00, 0x00},
};

static struct imgsensor_i2c_reg lsvideo_setting[] = {
	{0x0112, 0x0A, 0x00},
	{0x0113, 0x0A, 0x00},
	{0x0114, 0x03, 0x00},
	{0x0301, 0x05, 0x00},
	{0x0303, 0x02, 0x00},
	{0x0305, 0x04, 0x00},
	{0x0306, 0x00, 0x00},
	{0x0307, 0xD6, 0x00},
	{0x0309, 0x0A, 0x00},
	{0x030B, 0x01, 0x00},
	{0x030D, 0x04, 0x00},
	{0x030E, 0x00, 0x00},
	{0x030F, 0xD3, 0x00},
	{0x0310, 0x01, 0x00},
	{0x0820, 0x13, 0x00},
	{0x0821, 0xC8, 0x00},
	{0x0822, 0x00, 0x00},
	{0x0823, 0x00, 0x00},
	{0x4648, 0x7F, 0x00},
	{0x7420, 0x00, 0x00},
	{0x7421, 0x5C, 0x00},
	{0x7422, 0x00, 0x00},
	{0x7423, 0xD7, 0x00},
	{0x9104, 0x04, 0x00},
	{0x0342, 0x14, 0x00},
	{0x0343, 0xE8, 0x00},
	{0x0340, 0x0C, 0x00},
	{0x0341, 0x9C, 0x00},
	{0x0344, 0x00, 0x00},
	{0x0345, 0x00, 0x00},
	{0x0346, 0x00, 0x00},
	{0x0347, 0x00, 0x00},
	{0x0348, 0x10, 0x00},
	{0x0349, 0x6F, 0x00},
	{0x034A, 0x0C, 0x00},
	{0x034B, 0x2F, 0x00},
	{0x0381, 0x01, 0x00},
	{0x0383, 0x01, 0x00},
	{0x0385, 0x01, 0x00},
	{0x0387, 0x01, 0x00},
	{0x0900, 0x00, 0x00},
	{0x0901, 0x11, 0x00},
	{0x0401, 0x00, 0x00},
	{0x0404, 0x00, 0x00},
	{0x0405, 0x10, 0x00},
	{0x0408, 0x00, 0x00},
	{0x0409, 0x00, 0x00},
	{0x040A, 0x00, 0x00},
	{0x040B, 0x00, 0x00},
	{0x040C, 0x10, 0x00},
	{0x040D, 0x70, 0x00},
	{0x040E, 0x0C, 0x00},
	{0x040F, 0x30, 0x00},
	{0x3038, 0x00, 0x00},
	{0x303A, 0x00, 0x00},
	{0x303B, 0x10, 0x00},
	{0x300D, 0x00, 0x00},
	{0x034C, 0x10, 0x00},
	{0x034D, 0x70, 0x00},
	{0x034E, 0x0C, 0x00},
	{0x034F, 0x30, 0x00},
	{0x0202, 0x0C, 0x00},
	{0x0203, 0x92, 0x00},
	{0x0204, 0x00, 0x00},
	{0x0205, 0x00, 0x00},
	{0x020E, 0x01, 0x00},
	{0x020F, 0x00, 0x00},
	{0x0210, 0x01, 0x00},
	{0x0211, 0x00, 0x00},
	{0x0212, 0x01, 0x00},
	{0x0213, 0x00, 0x00},
	{0x0214, 0x01, 0x00},
	{0x0215, 0x00, 0x00},
	{0x7BCD, 0x00, 0x00},
	{0x94DC, 0x20, 0x00},
	{0x94DD, 0x20, 0x00},
	{0x94DE, 0x20, 0x00},
	{0x95DC, 0x20, 0x00},
	{0x95DD, 0x20, 0x00},
	{0x95DE, 0x20, 0x00},
	{0x7FB0, 0x00, 0x00},
	{0x9010, 0x3E, 0x00},
	{0x9419, 0x50, 0x00},
	{0x941B, 0x50, 0x00},
	{0x9519, 0x50, 0x00},
	{0x951B, 0x50, 0x00},
	{0x7FB4, 0x02, 0x00},
	{0x94BE, 0x3F, 0x00},
	{0x94BF, 0x3F, 0x00},
	{0x94C0, 0x3F, 0x00},
	{0x94C4, 0x3F, 0x00},
	{0x94C5, 0x3F, 0x00},
	{0x94C6, 0x3F, 0x00},
	{0x94CA, 0x40, 0x00},
	{0x94CB, 0x40, 0x00},
	{0x94CC, 0x40, 0x00},
	{0x94CD, 0x30, 0x00},
	{0x94CE, 0x30, 0x00},
	{0x94CF, 0x30, 0x00},
	{0x3030, 0x00, 0x00},
	{0x3032, 0x00, 0x00},
	{0x0220, 0x00, 0x00},
};

 /* cust1_setting aperture mode */
static struct imgsensor_i2c_reg cust1_setting[] = {
	{0x0112, 0x0A, 0x00},
	{0x0113, 0x0A, 0x00},
	{0x0114, 0x03, 0x00},
	{0x0301, 0x05, 0x00},
	{0x0303, 0x02, 0x00},
	{0x0305, 0x04, 0x00},
	{0x0306, 0x00, 0x00},
	{0x0307, 0xD6, 0x00},
	{0x0309, 0x0A, 0x00},
	{0x030B, 0x01, 0x00},
	{0x030D, 0x04, 0x00},
	{0x030E, 0x00, 0x00},
	{0x030F, 0xD3, 0x00},
	{0x0310, 0x01, 0x00},
	{0x0820, 0x13, 0x00},
	{0x0821, 0xC8, 0x00},
	{0x0822, 0x00, 0x00},
	{0x0823, 0x00, 0x00},
	{0x4648, 0x7F, 0x00},
	{0x7420, 0x00, 0x00},
	{0x7421, 0x5C, 0x00},
	{0x7422, 0x00, 0x00},
	{0x7423, 0xD7, 0x00},
	{0x9104, 0x04, 0x00},
	{0x0342, 0x14, 0x00},
	{0x0343, 0xE8, 0x00},
	{0x0340, 0x0C, 0x00},
	{0x0341, 0x9C, 0x00},
	{0x0344, 0x00, 0x00},
	{0x0345, 0x00, 0x00},
	{0x0346, 0x00, 0x00},
	{0x0347, 0x00, 0x00},
	{0x0348, 0x10, 0x00},
	{0x0349, 0x6F, 0x00},
	{0x034A, 0x0C, 0x00},
	{0x034B, 0x2F, 0x00},
	{0x0381, 0x01, 0x00},
	{0x0383, 0x01, 0x00},
	{0x0385, 0x01, 0x00},
	{0x0387, 0x01, 0x00},
	{0x0900, 0x00, 0x00},
	{0x0901, 0x11, 0x00},
	{0x0401, 0x00, 0x00},
	{0x0404, 0x00, 0x00},
	{0x0405, 0x10, 0x00},
	{0x0408, 0x01, 0x00},
	{0x0409, 0xD8, 0x00},
	{0x040A, 0x01, 0x00},
	{0x040B, 0x50, 0x00},
	{0x040C, 0x0C, 0x00},
	{0x040D, 0xC0, 0x00},
	{0x040E, 0x09, 0x00},
	{0x040F, 0x90, 0x00},
	{0x3038, 0x00, 0x00},
	{0x303A, 0x00, 0x00},
	{0x303B, 0x10, 0x00},
	{0x300D, 0x00, 0x00},
	{0x034C, 0x0C, 0x00},
	{0x034D, 0xC0, 0x00},
	{0x034E, 0x09, 0x00},
	{0x034F, 0x90, 0x00},
	{0x0202, 0x0C, 0x00},
	{0x0203, 0x92, 0x00},
	{0x0204, 0x00, 0x00},
	{0x0205, 0x00, 0x00},
	{0x020E, 0x01, 0x00},
	{0x020F, 0x00, 0x00},
	{0x0210, 0x01, 0x00},
	{0x0211, 0x00, 0x00},
	{0x0212, 0x01, 0x00},
	{0x0213, 0x00, 0x00},
	{0x0214, 0x01, 0x00},
	{0x0215, 0x00, 0x00},
	{0x7BCD, 0x00, 0x00},
	{0x94DC, 0x20, 0x00},
	{0x94DD, 0x20, 0x00},
	{0x94DE, 0x20, 0x00},
	{0x95DC, 0x20, 0x00},
	{0x95DD, 0x20, 0x00},
	{0x95DE, 0x20, 0x00},
	{0x7FB0, 0x00, 0x00},
	{0x9010, 0x3E, 0x00},
	{0x9419, 0x50, 0x00},
	{0x941B, 0x50, 0x00},
	{0x9519, 0x50, 0x00},
	{0x951B, 0x50, 0x00},
	{0x7FB4, 0x02, 0x00},
	{0x94BE, 0x3F, 0x00},
	{0x94BF, 0x3F, 0x00},
	{0x94C0, 0x3F, 0x00},
	{0x94C4, 0x3F, 0x00},
	{0x94C5, 0x3F, 0x00},
	{0x94C6, 0x3F, 0x00},
	{0x94CA, 0x40, 0x00},
	{0x94CB, 0x40, 0x00},
	{0x94CC, 0x40, 0x00},
	{0x94CD, 0x30, 0x00},
	{0x94CE, 0x30, 0x00},
	{0x94CF, 0x30, 0x00},
	{0x3030, 0x00, 0x00},
	{0x3032, 0x00, 0x00},
	{0x0220, 0x00, 0x00},
};

static struct imgsensor_i2c_reg_table dump_setting[] = {
	{0x0100, 0x0100, IMGSENSOR_I2C_WORD_DATA, IMGSENSOR_I2C_READ, 0},
	{0x0005,0x0000 , IMGSENSOR_I2C_WORD_DATA, IMGSENSOR_I2C_READ, 0},
	{0x0340, 0x0000, IMGSENSOR_I2C_WORD_DATA, IMGSENSOR_I2C_READ, 0},
	{0x0342, 0x0000, IMGSENSOR_I2C_WORD_DATA, IMGSENSOR_I2C_READ, 0},
	{0x034c, 0x0000, IMGSENSOR_I2C_WORD_DATA, IMGSENSOR_I2C_READ, 0},
	{0x034e, 0x0000, IMGSENSOR_I2C_WORD_DATA, IMGSENSOR_I2C_READ, 0},
	{0x0101, 0x0300, IMGSENSOR_I2C_WORD_DATA, IMGSENSOR_I2C_READ, 0},
};

static struct imgsensor_info_t imgsensor_info = {
	.sensor_id_reg = 0x0A26,
	.sensor_id = IMX258_ZET_SENSOR_ID,
	.checksum_value = 0x38ebe79e, /* checksum value for Camera Auto Test */

	.pre = {
		.pclk = 506400000,              //record different mode's pclk
		.linelength  = 5352,            //record different mode's linelength
		.framelength = 3120,            //record different mode's framelength
		.startx= 0,                     //record different mode's startx of grabwindow
		.starty = 0,                    //record different mode's starty of grabwindow
		.grabwindow_width  = 2100,      //record different mode's width of grabwindow
		.grabwindow_height = 1560,      //record different mode's height of grabwindow
		/*following for MIPIDataLowPwr2HighSpeedSettleDelayCount by different scenario*/
		.mipi_data_lp2hs_settle_dc = 85,
		/*following for GetDefaultFramerateByScenario()*/
		.max_framerate = 303,
		.mipi_pixel_rate = 506400000,
		.mipi_trail_val = 0x13,
	},

	.cap = {
		.pclk = 518400000,              //record different mode's pclk
		.linelength  = 5352,            //record different mode's linelength
		.framelength = 3228,            //record different mode's framelength
		.startx = 0,                    //record different mode's startx of grabwindow
		.starty = 0,                    //record different mode's starty of grabwindow
		.grabwindow_width  = 4208,      //record different mode's width of grabwindow
		.grabwindow_height = 3120,      //record different mode's height of grabwindow
		/*following for MIPIDataLowPwr2HighSpeedSettleDelayCount by different scenario*/
		.mipi_data_lp2hs_settle_dc = 85,
		/*following for GetDefaultFramerateByScenario()*/
		.max_framerate = 300,
		.mipi_pixel_rate = 506400000,
		.mipi_trail_val = 0x13,
	},

	.normal_video = {
		.pclk = 518400000,              //record different mode's pclk
		.linelength  = 5352,            //record different mode's linelength
		.framelength = 3228,            //record different mode's framelength
		.startx = 0,                    //record different mode's startx of grabwindow
		.starty = 0,                    //record different mode's starty of grabwindow
		.grabwindow_width  = 4208,      //record different mode's width of grabwindow
		.grabwindow_height = 3120,      //record different mode's height of grabwindow
		/*following for MIPIDataLowPwr2HighSpeedSettleDelayCount by different scenario*/
		.mipi_data_lp2hs_settle_dc = 85,
		/*following for GetDefaultFramerateByScenario()*/
		.max_framerate = 300,
		.mipi_pixel_rate = 506400000,
		.mipi_trail_val = 0x13,
	},
	.hs_video = {
		.pclk = 518400000,     //record different mode's pclk
		.linelength  = 5352,   //record different mode's linelength
		.framelength = 3228,   //record different mode's framelength
		.startx = 0,           //record different mode's startx of grabwindow
		.starty = 0,           //record different mode's starty of grabwindow
		.grabwindow_width  = 4208,  //record different mode's width of grabwindow
		.grabwindow_height = 3120,  //record different mode's height of grabwindow
		/*following for MIPIDataLowPwr2HighSpeedSettleDelayCount by different scenario*/
		.mipi_data_lp2hs_settle_dc = 85,
		/*following for GetDefaultFramerateByScenario()*/
		.max_framerate = 300,
		.mipi_pixel_rate = 506400000,
		.mipi_trail_val = 0x13,
	},
	.slim_video = {
		.pclk = 518400000,              //record different mode's pclk
		.linelength  = 5352,            //record different mode's linelength
		.framelength = 3228,            //record different mode's framelength
		.startx = 0,                    //record different mode's startx of grabwindow
		.starty = 0,                    //record different mode's starty of grabwindow
		.grabwindow_width  = 4208,      //record different mode's width of grabwindow
		.grabwindow_height = 3120,      //record different mode's height of grabwindow
		/*following for MIPIDataLowPwr2HighSpeedSettleDelayCount by different scenario*/
		.mipi_data_lp2hs_settle_dc = 85,
		/*following for GetDefaultFramerateByScenario()*/
		.max_framerate = 300,
		.mipi_pixel_rate = 506400000,
		.mipi_trail_val = 0x13,
	},
	.custom1 = {
		.pclk = 513600000,              //record different mode's pclk
		.linelength  = 5352,            //record different mode's linelength
		.framelength = 3228,            //record different mode's framelength
		.startx = 0,                    //record different mode's startx of grabwindow
		.starty = 0,                    //record different mode's starty of grabwindow
		.grabwindow_width  = 3264,      //record different mode's width of grabwindow
		.grabwindow_height = 2448,      //record different mode's height of grabwindow
		/*following for MIPIDataLowPwr2HighSpeedSettleDelayCount by different scenario*/
		.mipi_data_lp2hs_settle_dc = 85,
		/*following for GetDefaultFramerateByScenario()*/
		.max_framerate = 297,
		.mipi_pixel_rate = 506400000,
		.mipi_trail_val = 0x13,
	},

	.init_setting = {
		.setting = init_setting,
		.size = IMGSENSOR_ARRAY_SIZE(init_setting),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 0,
	},
	.pre_setting = {
		.setting = preview_setting,
		.size = IMGSENSOR_ARRAY_SIZE(preview_setting),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 10,
	},
	.cap_setting = {
		.setting = capture_setting,
		.size = IMGSENSOR_ARRAY_SIZE(capture_setting),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 0,
	},
	.normal_video_setting = {
		.setting = video_setting,
		.size = IMGSENSOR_ARRAY_SIZE(video_setting),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 0,
	},
	.hs_video_setting = {
		.setting = hsvideo_setting,
		.size = IMGSENSOR_ARRAY_SIZE(hsvideo_setting),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 0,
	},
	.slim_setting = {
		.setting = lsvideo_setting,
		.size = IMGSENSOR_ARRAY_SIZE(lsvideo_setting),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 0,
	},
	.custom1_setting = {
		.setting = cust1_setting,
		.size = IMGSENSOR_ARRAY_SIZE(cust1_setting),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 0,
	},

	.streamon_setting = {
		.setting = stream_on,
		.size = IMGSENSOR_ARRAY_SIZE(stream_on),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 10,
	},

	.streamoff_setting = {
		.setting = stream_off,
		.size = IMGSENSOR_ARRAY_SIZE(stream_off),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 10,
	},

	.dump_info = {
		.setting = dump_setting,
		.size = IMGSENSOR_ARRAY_SIZE(dump_setting),
	},
	.margin = 4,		/* sensor framelength & shutter margin */
	.min_shutter = 1,	/* 1,          //min shutter */
	/* max framelength by sensor register's limitation */
	.max_frame_length = 0x7fff,
	.ae_shut_delay_frame = 0,
	/* shutter delay frame for AE cycle,
	 * 2 frame with ispGain_delay-shut_delay=2-0=2
	 */
	.ae_sensor_gain_delay_frame = 0,
	/* sensor gain delay frame for AE cycle,
	 * 2 frame with ispGain_delay-sensor_gain_delay=2-0=2
	 */
	.ae_ispGain_delay_frame = 2,	/* isp gain delay frame for AE cycle */
	.ihdr_support = 1,	/* 1, support; 0,not support */
	.ihdr_le_firstline = 0,	/* 1,le first ; 0, se first */
	.sensor_mode_num = 6,	/* support sensor mode num */
	.cap_delay_frame = 2,	/* enter capture delay frame num */
	.pre_delay_frame = 2,	/* enter preview delay frame num */
	.video_delay_frame = 2,	/* enter video delay frame num */
	.hs_video_delay_frame = 2, /* enter high speed video  delay frame num */
	.slim_video_delay_frame = 2,	/* enter slim video delay frame num */
	.custom1_delay_frame = 2,
	.isp_driving_current = ISP_DRIVING_4MA,	/* mclk driving current */
	/* sensor_interface_type */
	.sensor_interface_type = SENSOR_INTERFACE_TYPE_MIPI,
	/* 0,MIPI_OPHY_NCSI2;  1,MIPI_OPHY_CSI2 */
	.mipi_sensor_type = MIPI_OPHY_NCSI2,
	.mipi_settle_delay_mode = MIPI_SETTLEDELAY_MANUAL,
	.sensor_output_dataformat = SENSOR_OUTPUT_FORMAT_RAW_B,
	/* sensor output first pixel color */
	.mclk = 24,	/* mclk value, suggest 24 or 26 for 24Mhz or 26Mhz */
	.mipi_lane_num = SENSOR_MIPI_4_LANE,	/* mipi lane num */
	.i2c_addr_table = {0x20,0xff},
	.i2c_speed = 400, // i2c read/write speed
	.addr_type = IMGSENSOR_I2C_WORD_ADDR,
};


static struct imgsensor_t imgsensor = {
	.mirror = IMAGE_NORMAL,	/* mirrorflip information */
	.sensor_mode = IMGSENSOR_MODE_INIT,
	.shutter = 0x14d,	/* current shutter */
	.gain = 0xe000,		/* current gain */
	.dummy_pixel = 0,	/* current dummypixel */
	.dummy_line = 0,	/* current dummyline */
	/* full size current fps : 24fps for PIP, 30fps for Normal or ZSD */
	.current_fps = 300,
	.autoflicker_en = KAL_FALSE,
	.test_pattern = KAL_FALSE,
	/* current scenario id */
	.current_scenario_id = MSDK_SCENARIO_ID_CAMERA_PREVIEW,
	.ihdr_en = KAL_FALSE, //sensor need support LE, SE with HDR feature
	.i2c_write_id = 0x20,	/* record current sensor's i2c write id */
	.i2c_speed = 400, // i2c read/write speed
	.addr_type = IMGSENSOR_I2C_WORD_ADDR,
};

/* Sensor output window information*/
static struct SENSOR_WINSIZE_INFO_STRUCT imgsensor_winsize_info[] = {
	/*preview*/
	{
		.full_w = 4208,
		.full_h = 3120,
		.x0_offset = 4,
		.y0_offset = 0,
		.w0_size = 4200,
		.h0_size = 3120,
		.scale_w = 2100,
		.scale_h = 1560,
		.x1_offset = 0,
		.y1_offset = 0,
		.w1_size = 2100,
		.h1_size = 1560,
		.x2_tg_offset = 0,
		.y2_tg_offset = 0,
		.w2_tg_size = 2100,
		.h2_tg_size = 1560,
	},
	/*capture*/
	{
		.full_w = 4208,
		.full_h = 3120,
		.x0_offset = 0,
		.y0_offset = 0,
		.w0_size = 4208,
		.h0_size = 3120,
		.scale_w = 4208,
		.scale_h = 3120,
		.x1_offset = 0,
		.y1_offset = 0,
		.w1_size = 4208,
		.h1_size = 3120,
		.x2_tg_offset = 0,
		.y2_tg_offset = 0,
		.w2_tg_size = 4208,
		.h2_tg_size = 3120,
	},
	/*video*/
	{
		.full_w = 4208,
		.full_h = 3120,
		.x0_offset = 0,
		.y0_offset = 0,
		.w0_size = 4208,
		.h0_size = 3120,
		.scale_w = 4208,
		.scale_h = 3120,
		.x1_offset = 0,
		.y1_offset = 0,
		.w1_size = 4208,
		.h1_size = 3120,
		.x2_tg_offset = 0,
		.y2_tg_offset = 0,
		.w2_tg_size = 4208,
		.h2_tg_size = 3120,
	}, { /* hs_video */
		.full_w = 4208,
		.full_h = 3120,
		.x0_offset = 0,
		.y0_offset = 0,
		.w0_size = 4208,
		.h0_size = 3120,
		.scale_w = 4208,
		.scale_h = 3120,
		.x1_offset = 0,
		.y1_offset = 0,
		.w1_size = 4208,
		.h1_size = 3120,
		.x2_tg_offset = 0,
		.y2_tg_offset = 0,
		.w2_tg_size = 4208,
		.h2_tg_size = 3120,
	}, { /* sl_video */
		.full_w = 4208,
		.full_h = 3120,
		.x0_offset = 0,
		.y0_offset = 0,
		.w0_size = 4208,
		.h0_size = 3120,
		.scale_w = 4208,
		.scale_h = 3120,
		.x1_offset = 0,
		.y1_offset = 0,
		.w1_size = 4208,
		.h1_size = 3120,
		.x2_tg_offset = 0,
		.y2_tg_offset = 0,
		.w2_tg_size = 4208,
		.h2_tg_size = 3120,
	}, { /* custom1 */
		.full_w = 3264,
		.full_h = 2448,
		.x0_offset = 0,
		.y0_offset = 0,
		.w0_size = 3264,
		.h0_size = 2448,
		.scale_w = 3264,
		.scale_h = 2448,
		.x1_offset = 0,
		.y1_offset = 0,
		.w1_size = 3264,
		.h1_size = 2448,
		.x2_tg_offset = 0,
		.y2_tg_offset = 0,
		.w2_tg_size = 3264,
		.h2_tg_size = 2448,
	},
};
#endif
