/*
 * ov8856_hlt_sensor.h
 *
 * Copyright (c) 2020-2020 Huawei Technologies Co., Ltd.
 *
 * ov8856_hlt image sensor config settings
 *
 * This software is licensed under the terms of the GNU General Public
 * License version 2, as published by the Free Software Foundation, and
 * may be copied, distributed, and modified under those terms.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 */

#ifndef _OV8856_HLT_SENSOR_H
#define _OV8856_HLT_SENSOR_H

#include <linux/i2c.h>
#include <linux/delay.h>
#include <linux/types.h>
#include <securec.h>
#include "kd_camera_typedef.h"
#include "kd_imgsensor_define.h"
#include "kd_imgsensor_errcode.h"
#include "imgsensor_sensor_i2c.h"
#include "imgsensor_sensor_common.h"
#include "kd_imgsensor.h"

#define REG_GAIN_1X 0x80
#define REG_MAX_AGAIN 0x7c0

#define HLT_MOD_ID 0x42
#define SENSOR_TIMEING_HTS_REG_H 0x380c
#define SENSOR_TIMEING_HTS_REG_L 0x380d
#define SENSOR_TIMEING_VTS_REG_H 0x380e
#define SENSOR_TIMEING_VTS_REG_L 0x380f
#define SENSOR_LONG_EXPO_REG_H 0x3500
#define SENSOR_LONG_EXPO_REG_M 0x3501
#define SENSOR_LONG_EXPO_REG_L 0x3502
#define SENSOR_LONG_GAIN_REG_H 0x3508
#define SENSOR_LONG_GAIN_REG_L 0x3509
#define OV8856_AF_WIDTH 4
#define OV8856OTP
#ifdef OV8856OTP
struct otp_struct {
	// bit[7]: info, bit[6]:wb, bit[5]:vcm, bit[4]:lenc
	int flag; // 0x7010
	int module_integrator_id;// 0x7011 | 0x7018
	int production_year_month;// 0x7012 | 0x7019
	int production_day;// 0x7013 | 0x701A
	int rg_ratio;
	int bg_ratio;
	int rg_ratio_golden;
	int bg_ratio_golden;
	unsigned char awb[7];//0x7011~0x7017 | 0x7018~0x701e
	unsigned char lsc[240];// 0x7029~0x7118 | 0x711a~0x7209
	int checksum;
};
#endif
static struct imgsensor_i2c_reg stream_on[] = {
	{ 0x0100, 0x01, 0x00 },
};

static struct imgsensor_i2c_reg stream_off[] = {
	{ 0x0100, 0x00, 0x00 },
};

static struct imgsensor_i2c_reg init_setting[] = {
	{ 0x0103, 0x01, 0x00 },
	{ 0x0302, 0x3c, 0x00 },
	{ 0x0303, 0x01, 0x00 },
	{ 0x031e, 0x0c, 0x00 },
	{ 0x3000, 0x00, 0x00 },
	{ 0x300e, 0x00, 0x00 },
	{ 0x3010, 0x00, 0x00 },
	{ 0x3015, 0x84, 0x00 },
	{ 0x3018, 0x72, 0x00 },
	{ 0x3021, 0x23, 0x00 },
	{ 0x3033, 0x24, 0x00 },
	{ 0x3500, 0x00, 0x00 },
	{ 0x3501, 0x4c, 0x00 },
	{ 0x3502, 0xe0, 0x00 },
	{ 0x3503, 0x08, 0x00 },
	{ 0x3505, 0x83, 0x00 },
	{ 0x3508, 0x01, 0x00 },
	{ 0x3509, 0x80, 0x00 },
	{ 0x350c, 0x00, 0x00 },
	{ 0x350d, 0x80, 0x00 },
	{ 0x350e, 0x04, 0x00 },
	{ 0x350f, 0x00, 0x00 },
	{ 0x3510, 0x00, 0x00 },
	{ 0x3511, 0x02, 0x00 },
	{ 0x3512, 0x00, 0x00 },
	{ 0x3600, 0x72, 0x00 },
	{ 0x3601, 0x40, 0x00 },
	{ 0x3602, 0x30, 0x00 },
	{ 0x3610, 0xc5, 0x00 },
	{ 0x3611, 0x58, 0x00 },
	{ 0x3612, 0x5c, 0x00 },
	{ 0x3613, 0xca, 0x00 },
	{ 0x3614, 0x60, 0x00 },
	{ 0x3628, 0xff, 0x00 },
	{ 0x3629, 0xff, 0x00 },
	{ 0x362a, 0xff, 0x00 },
	{ 0x3633, 0x10, 0x00 },
	{ 0x3634, 0x10, 0x00 },
	{ 0x3635, 0x10, 0x00 },
	{ 0x3636, 0x10, 0x00 },
	{ 0x3663, 0x08, 0x00 },
	{ 0x3669, 0x34, 0x00 },
	{ 0x366e, 0x08, 0x00 },
	{ 0x3706, 0x86, 0x00 },
	{ 0x370b, 0x7e, 0x00 },
	{ 0x3714, 0x27, 0x00 },
	{ 0x3730, 0x12, 0x00 },
	{ 0x3733, 0x10, 0x00 },
	{ 0x3764, 0x00, 0x00 },
	{ 0x3765, 0x00, 0x00 },
	{ 0x3769, 0x62, 0x00 },
	{ 0x376a, 0x2a, 0x00 },
	{ 0x376b, 0x30, 0x00 },
	{ 0x3780, 0x00, 0x00 },
	{ 0x3781, 0x24, 0x00 },
	{ 0x3782, 0x00, 0x00 },
	{ 0x3783, 0x23, 0x00 },
	{ 0x3798, 0x2f, 0x00 },
	{ 0x37a1, 0x60, 0x00 },
	{ 0x37a8, 0x6a, 0x00 },
	{ 0x37ab, 0x3f, 0x00 },
	{ 0x37c2, 0x14, 0x00 },
	{ 0x37c3, 0xf1, 0x00 },
	{ 0x37c9, 0x80, 0x00 },
	{ 0x37cb, 0x16, 0x00 },
	{ 0x37cc, 0x16, 0x00 },
	{ 0x37cd, 0x16, 0x00 },
	{ 0x37ce, 0x16, 0x00 },
	{ 0x3800, 0x00, 0x00 },
	{ 0x3801, 0x00, 0x00 },
	{ 0x3802, 0x00, 0x00 },
	{ 0x3803, 0x0c, 0x00 },
	{ 0x3804, 0x0c, 0x00 },
	{ 0x3805, 0xdf, 0x00 },
	{ 0x3806, 0x09, 0x00 },
	{ 0x3807, 0xa3, 0x00 },
	{ 0x3808, 0x06, 0x00 },
	{ 0x3809, 0x60, 0x00 },
	{ 0x380a, 0x04, 0x00 },
	{ 0x380b, 0xc8, 0x00 },
	{ 0x380c, 0x07, 0x00 },
	{ 0x380d, 0x8c, 0x00 },
	{ 0x380e, 0x09, 0x00 },
	{ 0x380f, 0xb2, 0x00 },
	{ 0x3810, 0x00, 0x00 },
	{ 0x3811, 0x08, 0x00 },
	{ 0x3812, 0x00, 0x00 },
	{ 0x3813, 0x02, 0x00 },
	{ 0x3814, 0x03, 0x00 },
	{ 0x3815, 0x01, 0x00 },
	{ 0x3816, 0x00, 0x00 },
	{ 0x3817, 0x00, 0x00 },
	{ 0x3818, 0x00, 0x00 },
	{ 0x3819, 0x00, 0x00 },
	{ 0x3820, 0x90, 0x00 },
	{ 0x3821, 0x67, 0x00 },
	{ 0x382a, 0x03, 0x00 },
	{ 0x382b, 0x01, 0x00 },
	{ 0x3830, 0x06, 0x00 },
	{ 0x3836, 0x02, 0x00 },
	{ 0x3862, 0x04, 0x00 },
	{ 0x3863, 0x08, 0x00 },
	{ 0x3cc0, 0x33, 0x00 },
	{ 0x3d85, 0x17, 0x00 },
	{ 0x3d8c, 0x73, 0x00 },
	{ 0x3d8d, 0xde, 0x00 },
	{ 0x4001, 0xe0, 0x00 },
	{ 0x4003, 0x40, 0x00 },
	{ 0x4008, 0x00, 0x00 },
	{ 0x4009, 0x05, 0x00 },
	{ 0x400a, 0x00, 0x00 },
	{ 0x400b, 0x84, 0x00 },
	{ 0x400f, 0x80, 0x00 },
	{ 0x4010, 0xf0, 0x00 },
	{ 0x4011, 0xff, 0x00 },
	{ 0x4012, 0x02, 0x00 },
	{ 0x4013, 0x01, 0x00 },
	{ 0x4014, 0x01, 0x00 },
	{ 0x4015, 0x01, 0x00 },
	{ 0x4042, 0x00, 0x00 },
	{ 0x4043, 0x80, 0x00 },
	{ 0x4044, 0x00, 0x00 },
	{ 0x4045, 0x80, 0x00 },
	{ 0x4046, 0x00, 0x00 },
	{ 0x4047, 0x80, 0x00 },
	{ 0x4048, 0x00, 0x00 },
	{ 0x4049, 0x80, 0x00 },
	{ 0x4041, 0x03, 0x00 },
	{ 0x404c, 0x20, 0x00 },
	{ 0x404d, 0x00, 0x00 },
	{ 0x404e, 0x20, 0x00 },
	{ 0x4203, 0x80, 0x00 },
	{ 0x4307, 0x30, 0x00 },
	{ 0x4317, 0x00, 0x00 },
	{ 0x4503, 0x08, 0x00 },
	{ 0x4601, 0x80, 0x00 },
	{ 0x4800, 0x44, 0x00 },
	{ 0x4816, 0x53, 0x00 },
	{ 0x481b, 0x58, 0x00 },
	{ 0x481f, 0x27, 0x00 },
	{ 0x4837, 0x16, 0x00 },
	{ 0x483c, 0x0f, 0x00 },
	{ 0x484b, 0x05, 0x00 },
	{ 0x5000, 0x77, 0x00 },
	{ 0x5001, 0x0a, 0x00 },
	{ 0x5004, 0x04, 0x00 },
	{ 0x502e, 0x03, 0x00 },
	{ 0x5030, 0x41, 0x00 },
	{ 0x5795, 0x00, 0x00 },
	{ 0x5796, 0x10, 0x00 },
	{ 0x5797, 0x10, 0x00 },
	{ 0x5798, 0x73, 0x00 },
	{ 0x5799, 0x73, 0x00 },
	{ 0x579a, 0x00, 0x00 },
	{ 0x579b, 0x28, 0x00 },
	{ 0x579c, 0x00, 0x00 },
	{ 0x579d, 0x16, 0x00 },
	{ 0x579e, 0x06, 0x00 },
	{ 0x579f, 0x20, 0x00 },
	{ 0x57a0, 0x04, 0x00 },
	{ 0x57a1, 0xa0, 0x00 },
	{ 0x5780, 0x14, 0x00 },
	{ 0x5781, 0x0f, 0x00 },
	{ 0x5782, 0x44, 0x00 },
	{ 0x5783, 0x02, 0x00 },
	{ 0x5784, 0x01, 0x00 },
	{ 0x5785, 0x01, 0x00 },
	{ 0x5786, 0x00, 0x00 },
	{ 0x5787, 0x04, 0x00 },
	{ 0x5788, 0x02, 0x00 },
	{ 0x5789, 0x0f, 0x00 },
	{ 0x578a, 0xfd, 0x00 },
	{ 0x578b, 0xf5, 0x00 },
	{ 0x578c, 0xf5, 0x00 },
	{ 0x578d, 0x03, 0x00 },
	{ 0x578e, 0x08, 0x00 },
	{ 0x578f, 0x0c, 0x00 },
	{ 0x5790, 0x08, 0x00 },
	{ 0x5791, 0x04, 0x00 },
	{ 0x5792, 0x00, 0x00 },
	{ 0x5793, 0x52, 0x00 },
	{ 0x5794, 0xa3, 0x00 },
	{ 0x59f8, 0x3d, 0x00 },
	{ 0x5a08, 0x02, 0x00 },
	{ 0x5b00, 0x02, 0x00 },
	{ 0x5b01, 0x10, 0x00 },
	{ 0x5b02, 0x03, 0x00 },
	{ 0x5b03, 0xcf, 0x00 },
	{ 0x5b05, 0x6c, 0x00 },
	{ 0x5e00, 0x00, 0x00 },
};

static struct imgsensor_i2c_reg preview_setting[] = {
	{ 0x3501, 0x4c, 0x00 },
	{ 0x3502, 0xe0, 0x00 },
	{ 0x366e, 0x08, 0x00 },
	{ 0x3714, 0x27, 0x00 },
	{ 0x37c2, 0x14, 0x00 },
	{ 0x3800, 0x00, 0x00 },
	{ 0x3801, 0x00, 0x00 },
	{ 0x3802, 0x00, 0x00 },
	{ 0x3803, 0x0c, 0x00 },
	{ 0x3804, 0x0c, 0x00 },
	{ 0x3805, 0xdf, 0x00 },
	{ 0x3806, 0x09, 0x00 },
	{ 0x3807, 0xa3, 0x00 },
	{ 0x3808, 0x06, 0x00 },
	{ 0x3809, 0x60, 0x00 },
	{ 0x380a, 0x04, 0x00 },
	{ 0x380b, 0xc8, 0x00 },
	{ 0x380c, 0x07, 0x00 },
	{ 0x380d, 0x8c, 0x00 },
	{ 0x380e, 0x09, 0x00 },
	{ 0x380f, 0xb2, 0x00 },
	{ 0x3810, 0x00, 0x00 },
	{ 0x3811, 0x02, 0x00 },
	{ 0x3812, 0x00, 0x00 },
	{ 0x3813, 0x02, 0x00 },
	{ 0x3814, 0x03, 0x00 },
	{ 0x3820, 0x80, 0x00 },
	{ 0x3821, 0x47, 0x00 },
	{ 0x4502, 0x50, 0x00 },
	{ 0x382a, 0x03, 0x00 },
	{ 0x4009, 0x05, 0x00 },
	{ 0x4601, 0x80, 0x00 },
	{ 0x5795, 0x00, 0x00 },
	{ 0x5796, 0x10, 0x00 },
	{ 0x5797, 0x10, 0x00 },
	{ 0x5798, 0x73, 0x00 },
	{ 0x5799, 0x73, 0x00 },
	{ 0x579a, 0x00, 0x00 },
	{ 0x579b, 0x28, 0x00 },
	{ 0x579c, 0x00, 0x00 },
	{ 0x579d, 0x16, 0x00 },
	{ 0x579e, 0x06, 0x00 },
	{ 0x579f, 0x20, 0x00 },
	{ 0x57a0, 0x04, 0x00 },
	{ 0x57a1, 0xa0, 0x00 },
	{ 0x366d, 0x00, 0x00 },
	{ 0x5003, 0xc8, 0x00 },
	{ 0x5006, 0x00, 0x00 },
	{ 0x5007, 0x00, 0x00 },
	{ 0x5e10, 0xfc, 0x00 },
};

static struct imgsensor_i2c_reg capture_setting[] = {
	{ 0x3501, 0x9a, 0x00 },
	{ 0x3502, 0x20, 0x00 },
	{ 0x366e, 0x10, 0x00 },
	{ 0x3714, 0x23, 0x00 },
	{ 0x37c2, 0x04, 0x00 },
	{ 0x3800, 0x00, 0x00 },
	{ 0x3801, 0x00, 0x00 },
	{ 0x3802, 0x00, 0x00 },
	{ 0x3803, 0x0c, 0x00 },
	{ 0x3804, 0x0c, 0x00 },
	{ 0x3805, 0xdf, 0x00 },
	{ 0x3806, 0x09, 0x00 },
	{ 0x3807, 0xa3, 0x00 },
	{ 0x3808, 0x0c, 0x00 },
	{ 0x3809, 0xc0, 0x00 },
	{ 0x380a, 0x09, 0x00 },
	{ 0x380b, 0x90, 0x00 },
	{ 0x380c, 0x07, 0x00 },
	{ 0x380d, 0x8c, 0x00 },
	{ 0x380e, 0x09, 0x00 },
	{ 0x380f, 0xb2, 0x00 },
	{ 0x3810, 0x00, 0x00 },
	{ 0x3811, 0x04, 0x00 },
	{ 0x3812, 0x00, 0x00 },
	{ 0x3813, 0x02, 0x00 },
	{ 0x3814, 0x01, 0x00 },
	{ 0x3820, 0x80, 0x00 },
	{ 0x3821, 0x46, 0x00 },
	{ 0x4502, 0x50, 0x00 },
	{ 0x382a, 0x01, 0x00 },
	{ 0x4009, 0x0b, 0x00 },
	{ 0x4601, 0x80, 0x00 },
	{ 0x5795, 0x02, 0x00 },
	{ 0x5796, 0x20, 0x00 },
	{ 0x5797, 0x20, 0x00 },
	{ 0x5798, 0xd5, 0x00 },
	{ 0x5799, 0xd5, 0x00 },
	{ 0x579a, 0x00, 0x00 },
	{ 0x579b, 0x50, 0x00 },
	{ 0x579c, 0x00, 0x00 },
	{ 0x579d, 0x2c, 0x00 },
	{ 0x579e, 0x0c, 0x00 },
	{ 0x579f, 0x40, 0x00 },
	{ 0x57a0, 0x09, 0x00 },
	{ 0x57a1, 0x40, 0x00 },
	{ 0x366d, 0x00, 0x00 },
	{ 0x5003, 0xc8, 0x00 },
	{ 0x5006, 0x00, 0x00 },
	{ 0x5007, 0x00, 0x00 },
	{ 0x5e10, 0xfc, 0x00 },
};

static struct imgsensor_i2c_reg video_setting[] = {
	{ 0x3501, 0x9a, 0x00 },
	{ 0x3502, 0x20, 0x00 },
	{ 0x366e, 0x10, 0x00 },
	{ 0x3714, 0x23, 0x00 },
	{ 0x37c2, 0x04, 0x00 },
	{ 0x3800, 0x00, 0x00 },
	{ 0x3801, 0x00, 0x00 },
	{ 0x3802, 0x00, 0x00 },
	{ 0x3803, 0x0c, 0x00 },
	{ 0x3804, 0x0c, 0x00 },
	{ 0x3805, 0xdf, 0x00 },
	{ 0x3806, 0x09, 0x00 },
	{ 0x3807, 0xa3, 0x00 },
	{ 0x3808, 0x0c, 0x00 },
	{ 0x3809, 0xc0, 0x00 },
	{ 0x380a, 0x09, 0x00 },
	{ 0x380b, 0x90, 0x00 },
	{ 0x380c, 0x07, 0x00 },
	{ 0x380d, 0x8c, 0x00 },
	{ 0x380e, 0x09, 0x00 },
	{ 0x380f, 0xb2, 0x00 },
	{ 0x3810, 0x00, 0x00 },
	{ 0x3811, 0x04, 0x00 },
	{ 0x3812, 0x00, 0x00 },
	{ 0x3813, 0x02, 0x00 },
	{ 0x3814, 0x01, 0x00 },
	{ 0x3820, 0x80, 0x00 },
	{ 0x3821, 0x46, 0x00 },
	{ 0x4502, 0x50, 0x00 },
	{ 0x382a, 0x01, 0x00 },
	{ 0x4009, 0x0b, 0x00 },
	{ 0x4601, 0x80, 0x00 },
	{ 0x5795, 0x02, 0x00 },
	{ 0x5796, 0x20, 0x00 },
	{ 0x5797, 0x20, 0x00 },
	{ 0x5798, 0xd5, 0x00 },
	{ 0x5799, 0xd5, 0x00 },
	{ 0x579a, 0x00, 0x00 },
	{ 0x579b, 0x50, 0x00 },
	{ 0x579c, 0x00, 0x00 },
	{ 0x579d, 0x2c, 0x00 },
	{ 0x579e, 0x0c, 0x00 },
	{ 0x579f, 0x40, 0x00 },
	{ 0x57a0, 0x09, 0x00 },
	{ 0x57a1, 0x40, 0x00 },
	{ 0x366d, 0x00, 0x00 },
	{ 0x5003, 0xc8, 0x00 },
	{ 0x5006, 0x00, 0x00 },
	{ 0x5007, 0x00, 0x00 },
	{ 0x5e10, 0xfc, 0x00 },
};

static struct imgsensor_i2c_reg test_partern_on[] = {
	{ 0x5000, 0x57, 0x00 },
	{ 0x5001, 0x02, 0x00 },
	{ 0x5e00, 0x80, 0x00 },
};

static struct imgsensor_i2c_reg  test_partern_off[] = {
	{ 0x5000, 0x77, 0x00 },
	{ 0x5001, 0x0a, 0x00 },
	{ 0x5e00, 0x00, 0x00 },
};

static struct imgsensor_i2c_reg_table dump_setting[] = {
	{ 0x0100, 0x0100, IMGSENSOR_I2C_WORD_DATA, IMGSENSOR_I2C_READ, 0 },
	{ 0x4848, 0x0000, IMGSENSOR_I2C_WORD_DATA, IMGSENSOR_I2C_READ, 0 },
	{ 0x3808, 0x1070, IMGSENSOR_I2C_WORD_DATA, IMGSENSOR_I2C_READ, 0 },
	{ 0x380a, 0x0c30, IMGSENSOR_I2C_WORD_DATA, IMGSENSOR_I2C_READ, 0 },
	{ 0x380c, 0x0460, IMGSENSOR_I2C_WORD_DATA, IMGSENSOR_I2C_READ, 0 },
	{ 0x380e, 0x0c8e, IMGSENSOR_I2C_WORD_DATA, IMGSENSOR_I2C_READ, 0 },
};

static struct imgsensor_info_t imgsensor_info = {
	.sensor_id_reg = 0x300B,
	.sensor_id = OV8856_HLT_SENSOR_ID,
	.checksum_value = 0xb1893b4f,

	.pre = {
		.pclk = 144000000,
		.linelength = 1932,
		.framelength = 2482,
		.startx = 0,
		.starty = 0,
		.grabwindow_width = 1632,
		.grabwindow_height = 1224,
		/*
		 * following for MIPIDataLowPwr2HighSpeedSettleDelayCount by
		 * different scenario
		 */
		.mipi_data_lp2hs_settle_dc = 85,
		/* following for GetDefaultFramerateByScenario() */
		.max_framerate = 300,
	},

	.cap = {
		.pclk = 144000000,
		.linelength = 1932,
		.framelength = 2482,
		.startx = 0,
		.starty = 0,
		.grabwindow_width = 3264,
		.grabwindow_height = 2448,
		/*
		 * following for MIPIDataLowPwr2HighSpeedSettleDelayCount by
		 * different scenario
		 */
		.mipi_data_lp2hs_settle_dc = 85,
		/* following for GetDefaultFramerateByScenario() */
		.max_framerate = 300,
	},

	.normal_video = {
		.pclk = 144000000,
		.linelength = 1932,
		.framelength = 2482,
		.startx = 0,
		.starty = 0,
		.grabwindow_width = 3264,
		.grabwindow_height = 2448,
		/*
		 * following for MIPIDataLowPwr2HighSpeedSettleDelayCount by
		 * different scenario
		 */
		.mipi_data_lp2hs_settle_dc = 85,
		/* following for GetDefaultFramerateByScenario() */
		.max_framerate = 300,
	},

	.init_setting = {
		.setting = init_setting,
		.size = IMGSENSOR_ARRAY_SIZE(init_setting),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 10,
	},
	.pre_setting = {
		.setting = preview_setting,
		.size = IMGSENSOR_ARRAY_SIZE(preview_setting),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 0,
	},
	.cap_setting = {
		.setting = capture_setting,
		.size = IMGSENSOR_ARRAY_SIZE(capture_setting),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 0,
	},
	.normal_video_setting = {
		.setting = video_setting,
		.size = IMGSENSOR_ARRAY_SIZE(video_setting),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 0,
	},
	.streamon_setting = {
		.setting = stream_on,
		.size = IMGSENSOR_ARRAY_SIZE(stream_on),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 0,
	},

	.streamoff_setting = {
		.setting = stream_off,
		.size = IMGSENSOR_ARRAY_SIZE(stream_off),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 0,
	},

	.test_pattern_on_setting = {
		.setting = test_partern_on,
		.size = IMGSENSOR_ARRAY_SIZE(test_partern_on),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 0,
	},

	.test_pattern_off_setting = {
		.setting = test_partern_off,
		.size = IMGSENSOR_ARRAY_SIZE(test_partern_off),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 0,
	},

	.dump_info = {
		.setting = dump_setting,
		.size = IMGSENSOR_ARRAY_SIZE(dump_setting),
	},

	.margin = 6,
	.min_shutter = 6,
	.max_frame_length = 0x90f7,
	.ae_shut_delay_frame = 0,
	.ae_sensor_gain_delay_frame = 0,
	.ae_ispGain_delay_frame = 2,
	.ihdr_support = 0,
	.ihdr_le_firstline = 0,
	.sensor_mode_num = 3,

	.cap_delay_frame = 3,
	.pre_delay_frame = 3,
	.video_delay_frame = 3,

	.isp_driving_current = ISP_DRIVING_4MA,
	.sensor_interface_type = SENSOR_INTERFACE_TYPE_MIPI,
	.mipi_sensor_type = MIPI_OPHY_NCSI2,
	.mipi_settle_delay_mode = 1,
	/* first pixel color */
	.sensor_output_dataformat = SENSOR_OUTPUT_FORMAT_RAW_B,
	.mclk = 24,
	.mipi_lane_num = SENSOR_MIPI_4_LANE,
	.i2c_addr_table = { 0x20, 0xff },
	.i2c_speed = 400,
	.addr_type = IMGSENSOR_I2C_WORD_ADDR,
};

static struct imgsensor_t imgsensor = {
	.mirror = IMAGE_NORMAL,
	.sensor_mode = IMGSENSOR_MODE_INIT,
	.shutter = 0x4C00,
	.gain = 0x200,
	.dummy_pixel = 0,
	.dummy_line = 0,
	.current_fps = 30,
	.autoflicker_en = KAL_FALSE,
	.test_pattern = KAL_FALSE,
	.current_scenario_id = MSDK_SCENARIO_ID_CAMERA_PREVIEW,
	.ihdr_en = KAL_FALSE,
	.i2c_write_id = 0x20,
};

/* Sensor output window information */
static struct SENSOR_WINSIZE_INFO_STRUCT imgsensor_winsize_info[] = {
	{	/* preview */
		.full_w = 3296,
		.full_h = 2480,
		.x0_offset = 0,
		.y0_offset = 12,
		.w0_size = 3296,
		.h0_size = 2456,
		.scale_w = 1648,
		.scale_h = 1228,
		.x1_offset = 2,
		.y1_offset = 2,
		.w1_size = 1632,
		.h1_size = 1224,
		.x2_tg_offset = 0,
		.y2_tg_offset = 0,
		.w2_tg_size = 1632,
		.h2_tg_size = 1224,
	}, { /* capture */
		.full_w = 3296,
		.full_h = 2480,
		.x0_offset = 0,
		.y0_offset = 12,
		.w0_size = 3296,
		.h0_size = 2456,
		.scale_w = 3296,
		.scale_h = 2456,
		.x1_offset = 4,
		.y1_offset = 2,
		.w1_size = 3264,
		.h1_size = 2448,
		.x2_tg_offset = 0,
		.y2_tg_offset = 0,
		.w2_tg_size = 3264,
		.h2_tg_size = 2448,
	}, { /* video */
		.full_w = 3296,
		.full_h = 2480,
		.x0_offset = 0,
		.y0_offset = 12,
		.w0_size = 3296,
		.h0_size = 2456,
		.scale_w = 3296,
		.scale_h = 2456,
		.x1_offset = 4,
		.y1_offset = 2,
		.w1_size = 3264,
		.h1_size = 2448,
		.x2_tg_offset = 0,
		.y2_tg_offset = 0,
		.w2_tg_size = 3264,
		.h2_tg_size = 2448,
	},
};
extern int iReadRegI2C(u8 *a_pSendData, u16 a_sizeSendData,
	u8 *a_pRecvData, u16 a_sizeRecvData, u16 i2cId);
extern int iWriteRegI2C(u8 *a_pSendData, u16 a_sizeSendData, u16 i2cId);
#endif
