/*
 *  Copyright (C) 2020-2020 Huawei Technologies Co., Ltd.
 *
 * gc8054 sunwin driver.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 */

#ifndef _GC8034_SUNWIN_SENSOR_H
#define _GC8034_SUNWIN_SENSOR_H


#include <linux/delay.h>
#include <linux/types.h>
#include <securec.h>
#include "kd_camera_typedef.h"
#include "kd_imgsensor_define.h"
#include "kd_imgsensor_errcode.h"
#include "imgsensor_sensor_i2c.h"
#include "imgsensor_sensor_common.h"
#include "kd_imgsensor.h"

#define GAIN_REG 0x0204
#define FRAME_LENGTH_REG 0x0340
#define GC8034_BASIC_FRAME_LENGTH 2484
#define GC8034_MIN_VB 16
#define GC8034_MAX_VB 8191
#define GC8034_PAGE_SEL_REG 0xfe
#define GC8034_VB_REG_H 0x07
#define GC8034_VB_REG_L 0x08
#define GC8034_STREAM_REG 0xfe
#define GC8034_SHUT_REG_H 0x03
#define GC8034_SHUT_REG_L 0x04
/* SENSOR MIRROR FLIP INFO */
#undef  GC8034_SUNWIN_MIRROR_NORMAL
#undef  GC8034_SUNWIN_MIRROR_H
#undef  GC8034_SUNWIN_MIRROR_V
#undef  GC8034_SUNWIN_MIRROR_HV

#define  GC8034_SUNWIN_MIRROR_NORMAL

#if defined(GC8034_SUNWIN_MIRROR_NORMAL)
	#define GC8034_SUNWIN_MIRROR         0xc0
	#define GC8034_SUNWIN_BinStartY      0x04
	#define GC8034_SUNWIN_BinStartX      0x05
	#define GC8034_SUNWIN_FullStartY     0x08
	#define GC8034_SUNWIN_FullStartX     0x09
#elif defined(GC8034_SUNWIN_MIRROR_H)
	#define GC8034_SUNWIN_MIRROR         0xc1
	#define GC8034_SUNWIN_BinStartY      0x04
	#define GC8034_SUNWIN_BinStartX      0x05
	#define GC8034_SUNWIN_FullStartY     0x08
	#define GC8034_SUNWIN_FullStartX     0x0b
#elif defined(GC8034_SUNWIN_MIRROR_V)
	#define GC8034_SUNWIN_MIRROR         0xc2
	#define GC8034_SUNWIN_BinStartY      0x04
	#define GC8034_SUNWIN_BinStartX      0x05
	#define GC8034_SUNWIN_FullStartY     0x08
	#define GC8034_SUNWIN_FullStartX     0x09
#elif defined(GC8034_SUNWIN_MIRROR_HV)
	#define GC8034_SUNWIN_MIRROR         0xc3
	#define GC8034_SUNWIN_BinStartY      0x04
	#define GC8034_SUNWIN_BinStartX      0x05
	#define GC8034_SUNWIN_FullStartY     0x08
	#define GC8034_SUNWIN_FullStartX     0x0b
#else
	#define GC8034_SUNWIN_MIRROR         0xc0
	#define GC8034_SUNWIN_BinStartY      0x04
	#define GC8034_SUNWIN_BinStartX      0x05
	#define GC8034_SUNWIN_FullStartY     0x08
	#define GC8034_SUNWIN_FullStartX     0x09
#endif
#define SANYINGXING_MOD_ID 0x02

#define SENSOR_BASE_GAIN 0x40
#define SENSOR_MAX_GAIN 0x400
#define MAX_AG_ID           9
#define MEAG_INDEX             7
#define AGC_REG_NUM            14
#undef GC8034_SUNWIN_OTP_FOR_CUSTOMER
#define GC8034_SUNWIN_OTP_FOR_CUSTOMER


#define DD_WIDTH            3284
#define DD_HEIGHT           2464
#if defined(GC8034_SUNWIN_OTP_FOR_CUSTOMER)
#define RG_TYPICAL          0x0400
#define BG_TYPICAL          0x0400
#define INFO_ROM_START      0x70
#define INFO_WIDTH          0x08
#define WB_ROM_START        0x5f
#define WB_WIDTH            0x04
#define GOLDEN_ROM_START    0x67
#define GOLDEN_WIDTH        0x04
#define LSC_NUM             99      /* (7+2)*(9+2) */

#endif

struct gc8034_sunwin_dd_t {
	kal_uint16 x;
	kal_uint16 y;
	kal_uint16 t;
};

struct gc8034_sunwin_otp_t {
	kal_uint8  dd_cnt;
	kal_uint8  dd_flag;
	kal_uint8  reg_flag;
	kal_uint8  reg_num;
	kal_uint8  reg_page[10];
	kal_uint8  reg_addr[10];
	kal_uint8  reg_value[10];
#if defined(GC8034_SUNWIN_OTP_FOR_CUSTOMER)
	kal_uint8  module_id;
	kal_uint8  lens_id;
	kal_uint8  vcm_id;
	kal_uint8  vcm_driver_id;
	kal_uint8  year;
	kal_uint8  month;
	kal_uint8  day;
	kal_uint8  wb_flag;
	kal_uint16 rg_gain;
	kal_uint16 bg_gain;
	kal_uint8  golden_flag;
	kal_uint16 golden_rg;
	kal_uint16 golden_bg;
	kal_uint8  lsc_flag;		/* 0:Empty 1:Success 2:Invalid */
#endif
};
enum {
	OTP_CLOSE = 0,
	OTP_OPEN,
};

static kal_uint8  bor_flag = 1;
static struct imgsensor_i2c_reg stream_on[] = {
	{ 0xfe, 0x00, 0x00 },
	{ 0x3f, 0xd0, 0x00 },
	{ 0xfe, 0x00, 0x00 },
};

static struct imgsensor_i2c_reg stream_off[] = {
	{ 0xfe, 0x00, 0x00 },
	{ 0x3f, 0x00, 0x00 },
	{ 0xfe, 0x00, 0x00 },
};

static struct imgsensor_i2c_reg init_setting[] = {
	{ 0xf2, 0x00, 0x00 },
	{ 0xf4, 0x80, 0x00 },
	{ 0xf5, 0x19, 0x00 },
	{ 0xf6, 0x44, 0x00 },
	{ 0xf8, 0x63, 0x00 },
	{ 0xfa, 0x45, 0x00 },
	{ 0xf9, 0x00, 0x00 },
	{ 0xf7, 0x95, 0x00 },
	{ 0xfc, 0x00, 0x00 },
	{ 0xfc, 0x00, 0x00 },
	{ 0xfc, 0xea, 0x00 },
	{ 0xfe, 0x03, 0x00 },
	{ 0x03, 0x9a, 0x00 },
	{ 0x18, 0x07, 0x00 },
	{ 0x01, 0x07, 0x00 },
	{ 0xfc, 0xee, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0x88, 0x03, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0x03, 0x08, 0x00 },
	{ 0x04, 0xc6, 0x00 },
	{ 0x05, 0x02, 0x00 },
	{ 0x06, 0x16, 0x00 },
	{ 0x07, 0x00, 0x00 },
	{ 0x08, 0x10, 0x00 },
	{ 0x0a, 0x3a, 0x00 },
	{ 0x0b, 0x00, 0x00 },
	{ 0x0c, 0x04, 0x00 },
	{ 0x0d, 0x09, 0x00 },
	{ 0x0e, 0xa0, 0x00 },
	{ 0x0f, 0x0c, 0x00 },
	{ 0x10, 0xd4, 0x00 },
	{ 0x17, GC8034_SUNWIN_MIRROR, 0x00 },
	{ 0x18, 0x02, 0x00 },
	{ 0x19, 0x17, 0x00 },
	{ 0x1e, 0x50, 0x00 },
	{ 0x1f, 0x80, 0x00 },
	{ 0x21, 0x4c, 0x00 },
	{ 0x25, 0x00, 0x00 },
	{ 0x28, 0x4a, 0x00 },
	{ 0x2d, 0x89, 0x00 },
	{ 0xca, 0x02, 0x00 },
	{ 0xcb, 0x00, 0x00 },
	{ 0xcc, 0x39, 0x00 },
	{ 0xce, 0xd0, 0x00 },
	{ 0xcf, 0x93, 0x00 },
	{ 0xd0, 0x1b, 0x00 },
	{ 0xd1, 0xaa, 0x00 },
	{ 0xd2, 0xcb, 0x00 },
	{ 0xd8, 0x40, 0x00 },
	{ 0xd9, 0xff, 0x00 },
	{ 0xda, 0x0e, 0x00 },
	{ 0xdb, 0xb0, 0x00 },
	{ 0xdc, 0x0e, 0x00 },
	{ 0xde, 0x08, 0x00 },
	{ 0xe4, 0xc6, 0x00 },
	{ 0xe5, 0x08, 0x00 },
	{ 0xe6, 0x10, 0x00 },
	{ 0xed, 0x2a, 0x00 },
	{ 0xfe, 0x02, 0x00 },
	{ 0x59, 0x02, 0x00 },
	{ 0x5a, 0x04, 0x00 },
	{ 0x5b, 0x08, 0x00 },
	{ 0x5c, 0x20, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0x1a, 0x09, 0x00 },
	{ 0x1d, 0x13, 0x00 },
	{ 0xfe, 0x10, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0xfe, 0x10, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0x20, 0x55, 0x00 },
	{ 0x33, 0x83, 0x00 },
	{ 0xfe, 0x01, 0x00 },
	{ 0xdf, 0x06, 0x00 },
	{ 0xe7, 0x18, 0x00 },
	{ 0xe8, 0x20, 0x00 },
	{ 0xe9, 0x16, 0x00 },
	{ 0xea, 0x17, 0x00 },
	{ 0xeb, 0x50, 0x00 },
	{ 0xec, 0x6c, 0x00 },
	{ 0xed, 0x9b, 0x00 },
	{ 0xee, 0xd8, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0x80, 0x13, 0x00 },
	{ 0x84, 0x01, 0x00 },
	{ 0x89, 0x03, 0x00 },
	{ 0x8d, 0x03, 0x00 },
	{ 0x8f, 0x14, 0x00 },
	{ 0xad, 0x00, 0x00 },
	{ 0x66, 0x0c, 0x00 },
	{ 0xbc, 0x09, 0x00 },
	{ 0xc2, 0x7f, 0x00 },
	{ 0xc3, 0xff, 0x00 },
	{ 0x90, 0x01, 0x00 },
	{ 0x92, GC8034_SUNWIN_BinStartY, 0x00 },
	{ 0x94, GC8034_SUNWIN_BinStartX, 0x00 },
	{ 0x95, 0x09, 0x00 },
	{ 0x96, 0x90, 0x00 },
	{ 0x97, 0x0c, 0x00 },
	{ 0x98, 0xc0, 0x00 },
	{ 0xb0, 0x90, 0x00 },
	{ 0xb1, 0x01, 0x00 },
	{ 0xb2, 0x00, 0x00 },
	{ 0xb6, 0x00, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0x40, 0x22, 0x00 },
	{ 0x41, 0x20, 0x00 },
	{ 0x42, 0x02, 0x00 },
	{ 0x43, 0x08, 0x00 },
	{ 0x4e, 0x0f, 0x00 },
	{ 0x4f, 0xf0, 0x00 },
	{ 0x58, 0x80, 0x00 },
	{ 0x59, 0x80, 0x00 },
	{ 0x5a, 0x80, 0x00 },
	{ 0x5b, 0x80, 0x00 },
	{ 0x5c, 0x00, 0x00 },
	{ 0x5d, 0x00, 0x00 },
	{ 0x5e, 0x00, 0x00 },
	{ 0x5f, 0x00, 0x00 },
	{ 0x6b, 0x01, 0x00 },
	{ 0x6c, 0x00, 0x00 },
	{ 0x6d, 0x0c, 0x00 },
	{ 0xfe, 0x01, 0x00 },
	{ 0xbf, 0x40, 0x00 },
	{ 0xfe, 0x01, 0x00 },
	{ 0x68, 0x77, 0x00 },
	{ 0xfe, 0x01, 0x00 },
	{ 0x60, 0x00, 0x00 },
	{ 0x61, 0x10, 0x00 },
	{ 0x62, 0x60, 0x00 },
	{ 0x63, 0x30, 0x00 },
	{ 0x64, 0x00, 0x00 },
	{ 0xfe, 0x01, 0x00 },
	{ 0xa8, 0x60, 0x00 },
	{ 0xa2, 0xd1, 0x00 },
	{ 0xc8, 0x57, 0x00 },
	{ 0xa1, 0xb8, 0x00 },
	{ 0xa3, 0x91, 0x00 },
	{ 0xc0, 0x50, 0x00 },
	{ 0xd0, 0x05, 0x00 },
	{ 0xd1, 0xb2, 0x00 },
	{ 0xd2, 0x1f, 0x00 },
	{ 0xd3, 0x00, 0x00 },
	{ 0xd4, 0x00, 0x00 },
	{ 0xd5, 0x00, 0x00 },
	{ 0xd6, 0x00, 0x00 },
	{ 0xd7, 0x00, 0x00 },
	{ 0xd8, 0x00, 0x00 },
	{ 0xd9, 0x00, 0x00 },
	{ 0xa4, 0x10, 0x00 },
	{ 0xa5, 0x20, 0x00 },
	{ 0xa6, 0x60, 0x00 },
	{ 0xa7, 0x80, 0x00 },
	{ 0xab, 0x18, 0x00 },
	{ 0xc7, 0xc0, 0x00 },
	{ 0xfe, 0x01, 0x00 },
	{ 0x20, 0x02, 0x00 },
	{ 0x21, 0x02, 0x00 },
	{ 0x23, 0x42, 0x00 },
	{ 0xfe, 0x03, 0x00 },
	{ 0x02, 0x03, 0x00 },
	{ 0x04, 0x80, 0x00 },
	{ 0x11, 0x2b, 0x00 },
	{ 0x12, 0xf0, 0x00 },
	{ 0x13, 0x0f, 0x00 },
	{ 0x15, 0x10, 0x00 },
	{ 0x16, 0x29, 0x00 },
	{ 0x17, 0xff, 0x00 },
	{ 0x19, 0xaa, 0x00 },
	{ 0x1a, 0x02, 0x00 },
	{ 0x21, 0x05, 0x00 },
	{ 0x22, 0x06, 0x00 },
	{ 0x23, 0x2b, 0x00 },
	{ 0x24, 0x00, 0x00 },
	{ 0x25, 0x12, 0x00 },
	{ 0x26, 0x07, 0x00 },
	{ 0x29, 0x07, 0x00 },
	{ 0x2a, 0x12, 0x00 },
	{ 0x2b, 0x07, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0x3f, 0x00, 0x00 },
};

static struct imgsensor_i2c_reg preview_setting[] = {
	{ 0xf2, 0x00, 0x00 },
	{ 0xf4, 0x80, 0x00 },
	{ 0xf5, 0x19, 0x00 },
	{ 0xf6, 0x44, 0x00 },
	{ 0xf8, 0x63, 0x00 },
	{ 0xfa, 0x45, 0x00 },
	{ 0xf9, 0x00, 0x00 },
	{ 0xf7, 0x9d, 0x00 },
	{ 0xfc, 0x00, 0x00 },
	{ 0xfc, 0x00, 0x00 },
	{ 0xfc, 0xea, 0x00 },
	{ 0xfe, 0x03, 0x00 },
	{ 0x03, 0x9a, 0x00 },
	{ 0x18, 0x07, 0x00 },
	{ 0x01, 0x07, 0x00 },
	{ 0xfc, 0xee, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0x3f, 0x00, 0x00 },
	{ 0xfe, 0x10, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0xfe, 0x10, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0x80, 0x10, 0x00 },
	{ 0xad, 0x30, 0x00 },
	{ 0x66, 0x2c, 0x00 },
	{ 0xbc, 0x49, 0x00 },
	{ 0x90, 0x01, 0x00 },
	{ 0x92, GC8034_SUNWIN_BinStartY, 0x00 },
	{ 0x94, GC8034_SUNWIN_BinStartX, 0x00 },
	{ 0x95, 0x04, 0x00 },
	{ 0x96, 0xc8, 0x00 },
	{ 0x97, 0x06, 0x00 },
	{ 0x98, 0x60, 0x00 },
	{ 0xfe, 0x03, 0x00 },
	{ 0x02, 0x03, 0x00 },
	{ 0x04, 0x80, 0x00 },
	{ 0x11, 0x2b, 0x00 },
	{ 0x12, 0xf8, 0x00 },
	{ 0x13, 0x07, 0x00 },
	{ 0x15, 0x10, 0x00 },
	{ 0x16, 0x29, 0x00 },
	{ 0x17, 0xff, 0x00 },
	{ 0x19, 0xaa, 0x00 },
	{ 0x1a, 0x02, 0x00 },
	{ 0x21, 0x02, 0x00 },
	{ 0x22, 0x03, 0x00 },
	{ 0x23, 0x0a, 0x00 },
	{ 0x24, 0x00, 0x00 },
	{ 0x25, 0x12, 0x00 },
	{ 0x26, 0x04, 0x00 },
	{ 0x29, 0x04, 0x00 },
	{ 0x2a, 0x02, 0x00 },
	{ 0x2b, 0x04, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0x3f, 0xd0, 0x00 },
};

static struct imgsensor_i2c_reg capture_setting[] = {
	{ 0xf2, 0x00, 0x00 },
	{ 0xf4, 0x80, 0x00 },
	{ 0xf5, 0x19, 0x00 },
	{ 0xf6, 0x44, 0x00 },
	{ 0xf8, 0x63, 0x00 },
	{ 0xfa, 0x45, 0x00 },
	{ 0xf9, 0x00, 0x00 },
	{ 0xf7, 0x95, 0x00 },
	{ 0xfc, 0x00, 0x00 },
	{ 0xfc, 0x00, 0x00 },
	{ 0xfc, 0xea, 0x00 },
	{ 0xfe, 0x03, 0x00 },
	{ 0x03, 0x9a, 0x00 },
	{ 0x18, 0x07, 0x00 },
	{ 0x01, 0x07, 0x00 },
	{ 0xfc, 0xee, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0x3f, 0x00, 0x00 },
	{ 0xfe, 0x10, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0xfe, 0x10, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0x80, 0x13, 0x00 },
	{ 0xad, 0x00, 0x00 },
	{ 0x66, 0x0c, 0x00 },
	{ 0xbc, 0x09, 0x00 },
	{ 0x90, 0x01, 0x00 },
	{ 0x92, GC8034_SUNWIN_FullStartY, 0x00 },
	{ 0x94, GC8034_SUNWIN_FullStartX, 0x00 },
	{ 0x95, 0x09, 0x00 },
	{ 0x96, 0x90, 0x00 },
	{ 0x97, 0x0c, 0x00 },
	{ 0x98, 0xc0, 0x00 },
	{ 0xfe, 0x03, 0x00 },
	{ 0x02, 0x03, 0x00 },
	{ 0x04, 0x80, 0x00 },
	{ 0x11, 0x2b, 0x00 },
	{ 0x12, 0xf0, 0x00 },
	{ 0x13, 0x0f, 0x00 },
	{ 0x15, 0x10, 0x00 },
	{ 0x16, 0x29, 0x00 },
	{ 0x17, 0xff, 0x00 },
	{ 0x19, 0xaa, 0x00 },
	{ 0x1a, 0x02, 0x00 },
	{ 0x21, 0x05, 0x00 },
	{ 0x22, 0x06, 0x00 },
	{ 0x23, 0x2b, 0x00 },
	{ 0x24, 0x00, 0x00 },
	{ 0x25, 0x12, 0x00 },
	{ 0x26, 0x07, 0x00 },
	{ 0x29, 0x07, 0x00 },
	{ 0x2a, 0x12, 0x00 },
	{ 0x2b, 0x07, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0x3f, 0xd0, 0x00 },
};

static struct imgsensor_i2c_reg video_setting[] = {
	{ 0xf2, 0x00, 0x00 },
	{ 0xf4, 0x80, 0x00 },
	{ 0xf5, 0x19, 0x00 },
	{ 0xf6, 0x44, 0x00 },
	{ 0xf8, 0x63, 0x00 },
	{ 0xfa, 0x45, 0x00 },
	{ 0xf9, 0x00, 0x00 },
	{ 0xf7, 0x95, 0x00 },
	{ 0xfc, 0x00, 0x00 },
	{ 0xfc, 0x00, 0x00 },
	{ 0xfc, 0xea, 0x00 },
	{ 0xfe, 0x03, 0x00 },
	{ 0x03, 0x9a, 0x00 },
	{ 0x18, 0x07, 0x00 },
	{ 0x01, 0x07, 0x00 },
	{ 0xfc, 0xee, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0x3f, 0x00, 0x00 },
	{ 0xfe, 0x10, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0xfe, 0x10, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0x80, 0x13, 0x00 },
	{ 0xad, 0x00, 0x00 },
	{ 0x66, 0x0c, 0x00 },
	{ 0xbc, 0x09, 0x00 },
	{ 0x90, 0x01, 0x00 },
	{ 0x92, GC8034_SUNWIN_FullStartY, 0x00 },
	{ 0x94, GC8034_SUNWIN_FullStartX, 0x00 },
	{ 0x95, 0x09, 0x00 },
	{ 0x96, 0x90, 0x00 },
	{ 0x97, 0x0c, 0x00 },
	{ 0x98, 0xc0, 0x00 },
	{ 0xfe, 0x03, 0x00 },
	{ 0x02, 0x03, 0x00 },
	{ 0x04, 0x80, 0x00 },
	{ 0x11, 0x2b, 0x00 },
	{ 0x12, 0xf0, 0x00 },
	{ 0x13, 0x0f, 0x00 },
	{ 0x15, 0x10, 0x00 },
	{ 0x16, 0x29, 0x00 },
	{ 0x17, 0xff, 0x00 },
	{ 0x19, 0xaa, 0x00 },
	{ 0x1a, 0x02, 0x00 },
	{ 0x21, 0x05, 0x00 },
	{ 0x22, 0x06, 0x00 },
	{ 0x23, 0x2b, 0x00 },
	{ 0x24, 0x00, 0x00 },
	{ 0x25, 0x12, 0x00 },
	{ 0x26, 0x07, 0x00 },
	{ 0x29, 0x07, 0x00 },
	{ 0x2a, 0x12, 0x00 },
	{ 0x2b, 0x07, 0x00 },
	{ 0xfe, 0x00, 0x00 },
	{ 0x3f, 0xd0, 0x00 },
};
static struct imgsensor_info_t imgsensor_info = {
	.sensor_id_reg = 0xf0,
	.sensor_id = GC8034_SUNWIN_SENSOR_ID, // defined in kd_imgsensor.h
	.checksum_value = 0x1b375588, // checksum for Camera Auto Test

	.pre = {
		.pclk = 320000000,
		.linelength = 4272,
		.framelength = 2500,
		.startx = 0,
		.starty = 0,
		.grabwindow_width = 1632,
		.grabwindow_height = 1224,
		.mipi_data_lp2hs_settle_dc = 85,
		.mipi_pixel_rate = 134400000,
		.max_framerate = 300,
	},
	.cap = {
		.pclk = 320000000,
		.linelength = 4272,
		.framelength = 2500,
		.startx = 0,
		.starty = 0,
		.grabwindow_width = 3264,
		.grabwindow_height = 2448,
		.mipi_data_lp2hs_settle_dc = 85,
		.mipi_pixel_rate = 268800000,
		.max_framerate = 300,
	},
	.normal_video = {
		.pclk = 320000000,
		.linelength = 4272,
		.framelength = 2500,
		.startx = 0,
		.starty = 0,
		.grabwindow_width = 3264,
		.grabwindow_height = 2448,
		.mipi_data_lp2hs_settle_dc = 85,
		.mipi_pixel_rate = 268800000,
		.max_framerate = 300,
	},
	.init_setting = {
		.setting = init_setting,
		.size = IMGSENSOR_ARRAY_SIZE(init_setting),
		.addr_type = IMGSENSOR_I2C_BYTE_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 0,
	},
	.pre_setting = {
		.setting = preview_setting,
		.size = IMGSENSOR_ARRAY_SIZE(preview_setting),
		.addr_type = IMGSENSOR_I2C_BYTE_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 10,
	},
	.cap_setting = {
		.setting = capture_setting,
		.size = IMGSENSOR_ARRAY_SIZE(capture_setting),
		.addr_type = IMGSENSOR_I2C_BYTE_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 0,
	},
	.normal_video_setting = {
		.setting = video_setting,
		.size = IMGSENSOR_ARRAY_SIZE(video_setting),
		.addr_type = IMGSENSOR_I2C_BYTE_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 0,
	},
	.streamon_setting = {
		.setting = stream_on,
		.size = IMGSENSOR_ARRAY_SIZE(stream_on),
		.addr_type = IMGSENSOR_I2C_BYTE_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 10,
	},

	.streamoff_setting = {
		.setting = stream_off,
		.size = IMGSENSOR_ARRAY_SIZE(stream_off),
		.addr_type = IMGSENSOR_I2C_BYTE_ADDR,
		.data_type = IMGSENSOR_I2C_BYTE_DATA,
		.delay = 10,
	},

	.margin = 16, // sensor framelength & shutter margin
	.min_shutter = 4, // min shutter
	.max_frame_length = 0x29b3, // max framelength by sensor reg's limit
	.ae_shut_delay_frame = 0, // shutter delay frame for AE cycle
	.ae_sensor_gain_delay_frame = 0,// sensor gain delay frame for AE cycle
	.ae_ispGain_delay_frame = 2, // isp gain delay frame for AE cycle
	.ihdr_support = 0, // 1, support; 0,not support
	.ihdr_le_firstline = 0, // 1,le first ; 0, se first
	.sensor_mode_num = 5, // sensor mode num, not support Slow motion
	.cap_delay_frame = 2, // enter capture delay frame num
	.pre_delay_frame = 2, // enter preview delay frame num
	.video_delay_frame = 2, // enter video delay frame num
	.hs_video_delay_frame = 2, // enter high speed video  delay frame num
	.slim_video_delay_frame = 2, // enter slim video delay frame num
	.isp_driving_current = ISP_DRIVING_4MA,  // mclk driving current
	.sensor_interface_type = SENSOR_INTERFACE_TYPE_MIPI,
	.mipi_sensor_type = MIPI_OPHY_NCSI2,
	.mipi_settle_delay_mode = 0, // 0, AUTO; 1,MANNUAL
#if defined(GC8034_SUNWIN_MIRROR_NORMAL)
	.sensor_output_dataformat = SENSOR_OUTPUT_FORMAT_RAW_R,
#elif defined(GC8034_SUNWIN_MIRROR_H)
	.sensor_output_dataformat = SENSOR_OUTPUT_FORMAT_RAW_Gr,
#elif defined(GC8034_SUNWIN_MIRROR_V)
	.sensor_output_dataformat = SENSOR_OUTPUT_FORMAT_RAW_Gb,
#elif defined(GC8034_SUNWIN_MIRROR_HV)
	.sensor_output_dataformat = SENSOR_OUTPUT_FORMAT_RAW_B,
#else
	.sensor_output_dataformat = SENSOR_OUTPUT_FORMAT_RAW_R,
#endif
	.mclk = 24, // mclk value, suggest 24 or 26 for 24Mhz or 26Mhz
	.mipi_lane_num = SENSOR_MIPI_4_LANE, // mipi lane num
	.i2c_addr_table = { 0x6e, 0xff }, // write id addr, must end with 0xff
	.i2c_speed = 400, // i2c read/write speed
	.addr_type = IMGSENSOR_I2C_BYTE_ADDR,
};

static struct imgsensor_t imgsensor = {
	.mirror = IMAGE_HV_MIRROR,
	.sensor_mode = IMGSENSOR_MODE_INIT,
	.shutter = 0x3ED,
	.gain = 0x40,
	.dummy_pixel = 0,
	.dummy_line = 0,
	.current_fps = 300,
	.autoflicker_en = KAL_FALSE,
	.test_pattern = KAL_FALSE,
	.current_scenario_id = MSDK_SCENARIO_ID_CAMERA_PREVIEW,
	.ihdr_en = 0,
	.i2c_write_id = 0x6e,
};

/* Sensor output window information */
static struct SENSOR_WINSIZE_INFO_STRUCT imgsensor_winsize_info[] = {
	{ /* preview */
		.full_w = 3264,
		.full_h = 2448,
		.x0_offset = 0,
		.y0_offset = 0,
		.w0_size = 3264,
		.h0_size = 2448,
		.scale_w = 1632,
		.scale_h = 1224,
		.x1_offset = 0,
		.y1_offset = 0,
		.w1_size = 1632,
		.h1_size = 1224,
		.x2_tg_offset = 0,
		.y2_tg_offset = 0,
		.w2_tg_size = 1632,
		.h2_tg_size = 1224,
	}, { /* capture */
		.full_w = 3264,
		.full_h = 2448,
		.x0_offset = 0,
		.y0_offset = 0,
		.w0_size = 3264,
		.h0_size = 2448,
		.scale_w = 3264,
		.scale_h = 2448,
		.x1_offset = 0,
		.y1_offset = 0,
		.w1_size = 3264,
		.h1_size = 2448,
		.x2_tg_offset = 0,
		.y2_tg_offset = 0,
		.w2_tg_size = 3264,
		.h2_tg_size = 2448,
	}, { /* video */
		.full_w = 3264,
		.full_h = 2448,
		.x0_offset = 0,
		.y0_offset = 0,
		.w0_size = 3264,
		.h0_size = 2448,
		.scale_w = 3264,
		.scale_h = 2448,
		.x1_offset = 0,
		.y1_offset = 0,
		.w1_size = 3264,
		.h1_size = 2448,
		.x2_tg_offset = 0,
		.y2_tg_offset = 0,
		.w2_tg_size = 3264,
		.h2_tg_size = 2448,
	},
};
extern int iReadRegI2C(u8 *a_pSendData, u16 a_sizeSendData,
	u8 *a_pRecvData, u16 a_sizeRecvData, u16 i2cId);
extern int iWriteRegI2C(u8 *a_pSendData, u16 a_sizeSendData, u16 i2cId);
extern int iWriteReg(u16 a_u2Addr, u32 a_u4Data, u32 a_u4Bytes, u16 i2cId);
#endif

