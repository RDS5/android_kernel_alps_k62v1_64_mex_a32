/*
 * hi1333_qtech_sensor.h
 *
 * Copyright (c) 2019-2019 Huawei Technologies Co., Ltd.
 *
 * hi1333_qtech image sensor config settings
 *
 * This software is licensed under the terms of the GNU General Public
 * License version 2, as published by the Free Software Foundation, and
 * may be copied, distributed, and modified under those terms.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 */

#ifndef _HI1333_QTECH_SENSOR_H
#define _HI1333_QTECH_SENSOR_H

#include "kd_camera_typedef.h"
#include "kd_imgsensor_define.h"
#include "kd_imgsensor_errcode.h"
#include "imgsensor_sensor_i2c.h"
#include "imgsensor_sensor_common.h"
#include "kd_imgsensor.h"
#include <linux/delay.h>

#define SENSOR_FRM_LENGTH_REG_H 0x0006
#define SENSOR_FRM_LENGTH_REG_L 0x0007
#define SENSOR_LINE_LENGTH_PCK_REG_H 0x0008
#define SENSOR_LINE_LENGTH_PCK_REG_L 0x0009
#define SENSOR_INTEG_TIME_HL 0x0073
#define SENSOR_INTEG_TIME_H 0x0074
#define SENSOR_INTEG_TIME_L 0x0075
#define SENSOR_ANA_GAIN_REG_H 0x0076
#define SENSOR_ANA_GAIN_REG_L 0x0077
#define SENSOR_AF_I2C_ADDR 0x18
#define SENSOR_MODULE_ID_H 0x0F16
#define SENSOR_MODULE_ID_L 0x0F17
#define SENSOR_FRAME_CNT 0x0a00
#define SENSOR_ISP_EN_REG_H 0x0A04
#define SENSOR_ISP_EN_REG_L 0x0A05
#define SENSOR_TEST_PATTERN_REG 0x020A
#define SENSOR_IMAGE_ORIENTATION_REG 0x000E

static struct imgsensor_i2c_reg stream_on[] = {
	{ 0x0a00, 0x0100, 0x00 },
};

static struct imgsensor_i2c_reg stream_off[] = {
	{ 0x0a00, 0x0000, 0x00 },
};

static struct imgsensor_i2c_reg init_setting[] = {
	{ 0x2ffe, 0xd800, 0x00 },
	{ 0x0e04, 0x0013, 0x00 },
	{ 0x3048, 0x5020, 0x00 },
	{ 0x0f30, 0x001f, 0x00 },
	{ 0x0f36, 0x001f, 0x00 },
	{ 0x0c00, 0x11d8, 0x00 },
	{ 0x0c02, 0x0011, 0x00 },
	{ 0x0c04, 0x5000, 0x00 },
	{ 0x0c06, 0x01eb, 0x00 },
	{ 0x0c10, 0x0040, 0x00 },
	{ 0x0c12, 0x0040, 0x00 },
	{ 0x0c14, 0x0040, 0x00 },
	{ 0x0c16, 0x0040, 0x00 },
	{ 0x0c18, 0x8000, 0x00 },
	{ 0x0c62, 0x0194, 0x00 },
	{ 0x0c64, 0x0286, 0x00 },
	{ 0x0c66, 0x0294, 0x00 },
	{ 0x0c68, 0x0100, 0x00 },
	{ 0x0cb2, 0x0200, 0x00 },
	{ 0x0714, 0xe8e8, 0x00 },
	{ 0x0716, 0xede8, 0x00 },
	{ 0x000e, 0x0200, 0x00 },
	{ 0x0a10, 0x400c, 0x00 },
	{ 0x003e, 0x0000, 0x00 },
	{ 0x0074, 0x09da, 0x00 },
	{ 0x0a04, 0x03ea, 0x00 },
	{ 0x0076, 0x0000, 0x00 },
	{ 0x0724, 0x0f1f, 0x00 },
	{ 0x0068, 0x0703, 0x00 },
	{ 0x0060, 0x0000, 0x00 },
	{ 0x0062, 0x0200, 0x00 },
	{ 0x075e, 0x0535, 0x00 },
	{ 0x0012, 0x0fcd, 0x00 },
	{ 0x0806, 0x0002, 0x00 },
	{ 0x0900, 0x0300, 0x00 },
	{ 0x0902, 0xc219, 0x00 },
	{ 0x095a, 0x0099, 0x00 },
	{ 0x095c, 0x1111, 0x00 },
	{ 0x095e, 0x98c0, 0x00 },
	{ 0x0960, 0x0000, 0x00 },
	{ 0x0a38, 0x080c, 0x00 },
	{ 0x0a3a, 0x140c, 0x00 },
	{ 0x0a3c, 0x280c, 0x00 },
	{ 0x0a3e, 0x340c, 0x00 },
	{ 0x0a40, 0x0418, 0x00 },
	{ 0x0a42, 0x1818, 0x00 },
	{ 0x0a44, 0x2418, 0x00 },
	{ 0x0a46, 0x3818, 0x00 },
	{ 0x0a48, 0x082c, 0x00 },
	{ 0x0a4a, 0x142c, 0x00 },
	{ 0x0a4c, 0x282c, 0x00 },
	{ 0x0a4e, 0x342c, 0x00 },
	{ 0x0a50, 0x0438, 0x00 },
	{ 0x0a52, 0x1838, 0x00 },
	{ 0x0a54, 0x2438, 0x00 },
	{ 0x0a56, 0x3838, 0x00 },
	{ 0x0a58, 0x0808, 0x00 },
	{ 0x0a5a, 0x1408, 0x00 },
	{ 0x0a5c, 0x2808, 0x00 },
	{ 0x0a5e, 0x3408, 0x00 },
	{ 0x0a60, 0x041c, 0x00 },
	{ 0x0a62, 0x181c, 0x00 },
	{ 0x0a64, 0x241c, 0x00 },
	{ 0x0a66, 0x381c, 0x00 },
	{ 0x0a68, 0x0828, 0x00 },
	{ 0x0a6a, 0x1428, 0x00 },
	{ 0x0a6c, 0x2828, 0x00 },
	{ 0x0a6e, 0x3428, 0x00 },
	{ 0x0a70, 0x043c, 0x00 },
	{ 0x0a72, 0x183c, 0x00 },
	{ 0x0a74, 0x243c, 0x00 },
	{ 0x0a76, 0x383c, 0x00 },
	{ 0x0404, 0x015c, 0x00 },
	{ 0x0406, 0x0138, 0x00 },
	{ 0x040a, 0x0115, 0x00 },
	{ 0x040c, 0x022a, 0x00 },
	{ 0x040e, 0xbc52, 0x00 },
	{ 0x0410, 0x0056, 0x00 },
	{ 0x0412, 0x00ac, 0x00 },
	{ 0x0414, 0x6907, 0x00 },
	{ 0x0422, 0x0011, 0x00 },
	{ 0x0424, 0x0023, 0x00 },
	{ 0x0426, 0x2f15, 0x00 },
	{ 0x0428, 0x0016, 0x00 },
	{ 0x042a, 0x002b, 0x00 },
	{ 0x042c, 0x3483, 0x00 },
	{ 0x0324, 0x0100, 0x00 },
	{ 0x0600, 0x0D3e, 0x00 },
	{ 0x0a78, 0x0400, 0x00 },
};

static struct imgsensor_i2c_reg preview_setting[] = {
	{ 0x0f32, 0x0249, 0x00 },
	{ 0x0f38, 0x0376, 0x00 },
	{ 0x0f3a, 0x4107, 0x00 },
	{ 0x093e, 0x0100, 0x00 },
	{ 0x0920, 0xc104, 0x00 },
	{ 0x0922, 0x030d, 0x00 },
	{ 0x0924, 0x0203, 0x00 },
	{ 0x0926, 0x0606, 0x00 },
	{ 0x0928, 0x0804, 0x00 },
	{ 0x092a, 0x0a06, 0x00 },
	{ 0x092c, 0x1500, 0x00 },
	{ 0x0910, 0x02f8, 0x00 },
	{ 0x0912, 0x003a, 0x00 },
	{ 0x0914, 0x000a, 0x00 },
	{ 0x0916, 0x000a, 0x00 },
	{ 0x091a, 0x0005, 0x00 },
	{ 0x0938, 0x0000, 0x00 },
	{ 0x0904, 0x2bb0, 0x00 },
	{ 0x0942, 0x0008, 0x00 },
	{ 0x0520, 0x0100, 0x00 },
	{ 0x0532, 0x0100, 0x00 },
	{ 0x0a2a, 0x8060, 0x00 },
	{ 0x0a2c, 0x2020, 0x00 },
	{ 0x0a32, 0x0301, 0x00 },
	{ 0x0a26, 0x0048, 0x00 },
	{ 0x0a28, 0x001c, 0x00 },
	{ 0x0a36, 0x0000, 0x00 },
	{ 0x0408, 0x0000, 0x00 },
	{ 0x0418, 0x0000, 0x00 },
	{ 0x0800, 0x0400, 0x00 },
	{ 0x0008, 0x02e8, 0x00 },
	{ 0x000c, 0x000c, 0x00 },
	{ 0x0804, 0x0008, 0x00 },
	{ 0x0026, 0x003c, 0x00 },
	{ 0x002c, 0x0c71, 0x00 },
	{ 0x005c, 0x0204, 0x00 },
	{ 0x002e, 0x1111, 0x00 },
	{ 0x0032, 0x3311, 0x00 },
	{ 0x0006, 0x0ca6, 0x00 },
	{ 0x0a0e, 0x0002, 0x00 },
	{ 0x0a12, 0x0838, 0x00 },
	{ 0x0a14, 0x0618, 0x00 },
	{ 0x075c, 0x0100, 0x00 },
	{ 0x0050, 0x4300, 0x00 },
	{ 0x0722, 0x0700, 0x00 },
	{ 0x004c, 0x0100, 0x00 },
};

static struct imgsensor_i2c_reg capture_setting[] = {
	{ 0x0f32, 0x0249, 0x00 },
	{ 0x0f38, 0x0376, 0x00 },
	{ 0x0f3a, 0x4007, 0x00 },
	{ 0x093e, 0x0000, 0x00 },
	{ 0x0920, 0xc106, 0x00 },
	{ 0x0922, 0x061a, 0x00 },
	{ 0x0924, 0x0206, 0x00 },
	{ 0x0926, 0x0b09, 0x00 },
	{ 0x0928, 0x0b08, 0x00 },
	{ 0x092a, 0x0a06, 0x00 },
	{ 0x092c, 0x1500, 0x00 },
	{ 0x0910, 0x0668, 0x00 },
	{ 0x0912, 0x00a6, 0x00 },
	{ 0x0914, 0x0022, 0x00 },
	{ 0x0916, 0x0022, 0x00 },
	{ 0x091a, 0x0024, 0x00 },
	{ 0x0938, 0x0000, 0x00 },
	{ 0x0904, 0x2bb0, 0x00 },
	{ 0x0942, 0x0008, 0x00 },
	{ 0x0520, 0x0100, 0x00 },
	{ 0x0532, 0x0100, 0x00 },
	{ 0x0a2a, 0x8060, 0x00 },
	{ 0x0a2c, 0x2020, 0x00 },
	{ 0x0a32, 0x0301, 0x00 },
	{ 0x0a26, 0x0048, 0x00 },
	{ 0x0a28, 0x001a, 0x00 },
	{ 0x0a36, 0x0000, 0x00 },
	{ 0x0408, 0x0202, 0x00 },
	{ 0x0418, 0x0000, 0x00 },
	{ 0x0800, 0x0000, 0x00 },
	{ 0x0008, 0x02e8, 0x00 },
	{ 0x000c, 0x000c, 0x00 },
	{ 0x0804, 0x0010, 0x00 },
	{ 0x0026, 0x003e, 0x00 },
	{ 0x002c, 0x0c71, 0x00 },
	{ 0x005c, 0x0202, 0x00 },
	{ 0x002e, 0x1111, 0x00 },
	{ 0x0032, 0x1111, 0x00 },
	{ 0x0006, 0x0ca6, 0x00 },
	{ 0x0a0e, 0x0001, 0x00 },
	{ 0x0a12, 0x1070, 0x00 },
	{ 0x0a14, 0x0c30, 0x00 },
	{ 0x075c, 0x0100, 0x00 },
	{ 0x0050, 0x4300, 0x00 },
	{ 0x0722, 0x0700, 0x00 },
	{ 0x004c, 0x0100, 0x00 },
};

static struct imgsensor_i2c_reg video_setting[] = {
	{ 0x0f32, 0x0249, 0x00 },
	{ 0x0f38, 0x0376, 0x00 },
	{ 0x0f3a, 0x4007, 0x00 },
	{ 0x093e, 0x0000, 0x00 },
	{ 0x0920, 0xc106, 0x00 },
	{ 0x0922, 0x061a, 0x00 },
	{ 0x0924, 0x0206, 0x00 },
	{ 0x0926, 0x0b09, 0x00 },
	{ 0x0928, 0x0b08, 0x00 },
	{ 0x092a, 0x0a06, 0x00 },
	{ 0x092c, 0x1500, 0x00 },
	{ 0x0910, 0x0668, 0x00 },
	{ 0x0912, 0x00a6, 0x00 },
	{ 0x0914, 0x0022, 0x00 },
	{ 0x0916, 0x0022, 0x00 },
	{ 0x091a, 0x0024, 0x00 },
	{ 0x0938, 0x0000, 0x00 },
	{ 0x0904, 0x2bb0, 0x00 },
	{ 0x0942, 0x0008, 0x00 },
	{ 0x0520, 0x0100, 0x00 },
	{ 0x0532, 0x0100, 0x00 },
	{ 0x0a2a, 0x8060, 0x00 },
	{ 0x0a2c, 0x2020, 0x00 },
	{ 0x0a32, 0x0301, 0x00 },
	{ 0x0a26, 0x0048, 0x00 },
	{ 0x0a28, 0x001a, 0x00 },
	{ 0x0a36, 0x0000, 0x00 },
	{ 0x0408, 0x0202, 0x00 },
	{ 0x0418, 0x0000, 0x00 },
	{ 0x0800, 0x0000, 0x00 },
	{ 0x0008, 0x02e8, 0x00 },
	{ 0x000c, 0x000c, 0x00 },
	{ 0x0804, 0x0010, 0x00 },
	{ 0x0026, 0x003e, 0x00 },
	{ 0x002c, 0x0c71, 0x00 },
	{ 0x005c, 0x0202, 0x00 },
	{ 0x002e, 0x1111, 0x00 },
	{ 0x0032, 0x1111, 0x00 },
	{ 0x0006, 0x0ca6, 0x00 },
	{ 0x0a0e, 0x0001, 0x00 },
	{ 0x0a12, 0x1070, 0x00 },
	{ 0x0a14, 0x0c30, 0x00 },
	{ 0x075c, 0x0100, 0x00 },
	{ 0x0050, 0x4300, 0x00 },
	{ 0x0722, 0x0700, 0x00 },
	{ 0x004c, 0x0100, 0x00 },
};

static struct imgsensor_i2c_reg hsvideo_setting[] = {
	{ 0x0f32, 0x0249, 0x00 },
	{ 0x0f38, 0x0376, 0x00 },
	{ 0x0f3a, 0x4007, 0x00 },
	{ 0x093e, 0x0000, 0x00 },
	{ 0x0920, 0xc106, 0x00 },
	{ 0x0922, 0x061a, 0x00 },
	{ 0x0924, 0x0206, 0x00 },
	{ 0x0926, 0x0b09, 0x00 },
	{ 0x0928, 0x0b08, 0x00 },
	{ 0x092a, 0x0a06, 0x00 },
	{ 0x092c, 0x1500, 0x00 },
	{ 0x0910, 0x0668, 0x00 },
	{ 0x0912, 0x00a6, 0x00 },
	{ 0x0914, 0x0022, 0x00 },
	{ 0x0916, 0x0022, 0x00 },
	{ 0x091a, 0x0024, 0x00 },
	{ 0x0938, 0x0000, 0x00 },
	{ 0x0904, 0x2bb0, 0x00 },
	{ 0x0942, 0x0008, 0x00 },
	{ 0x0520, 0x0100, 0x00 },
	{ 0x0532, 0x0100, 0x00 },
	{ 0x0a2a, 0x8060, 0x00 },
	{ 0x0a2c, 0x2020, 0x00 },
	{ 0x0a32, 0x0301, 0x00 },
	{ 0x0a26, 0x0048, 0x00 },
	{ 0x0a28, 0x001a, 0x00 },
	{ 0x0a36, 0x0000, 0x00 },
	{ 0x0408, 0x0202, 0x00 },
	{ 0x0418, 0x0000, 0x00 },
	{ 0x0800, 0x0000, 0x00 },
	{ 0x0008, 0x02e8, 0x00 },
	{ 0x000c, 0x000c, 0x00 },
	{ 0x0804, 0x0010, 0x00 },
	{ 0x0026, 0x003e, 0x00 },
	{ 0x002c, 0x0c71, 0x00 },
	{ 0x005c, 0x0202, 0x00 },
	{ 0x002e, 0x1111, 0x00 },
	{ 0x0032, 0x1111, 0x00 },
	{ 0x0006, 0x0ca6, 0x00 },
	{ 0x0a0e, 0x0001, 0x00 },
	{ 0x0a12, 0x1070, 0x00 },
	{ 0x0a14, 0x0c30, 0x00 },
	{ 0x075c, 0x0100, 0x00 },
	{ 0x0050, 0x4300, 0x00 },
	{ 0x0722, 0x0700, 0x00 },
	{ 0x004c, 0x0100, 0x00 },
};

static struct imgsensor_i2c_reg lsvideo_setting[] = {
	{ 0x0f32, 0x0249, 0x00 },
	{ 0x0f38, 0x0376, 0x00 },
	{ 0x0f3a, 0x4007, 0x00 },
	{ 0x093e, 0x0000, 0x00 },
	{ 0x0920, 0xc106, 0x00 },
	{ 0x0922, 0x061a, 0x00 },
	{ 0x0924, 0x0206, 0x00 },
	{ 0x0926, 0x0b09, 0x00 },
	{ 0x0928, 0x0b08, 0x00 },
	{ 0x092a, 0x0a06, 0x00 },
	{ 0x092c, 0x1500, 0x00 },
	{ 0x0910, 0x0668, 0x00 },
	{ 0x0912, 0x00a6, 0x00 },
	{ 0x0914, 0x0022, 0x00 },
	{ 0x0916, 0x0022, 0x00 },
	{ 0x091a, 0x0024, 0x00 },
	{ 0x0938, 0x0000, 0x00 },
	{ 0x0904, 0x2bb0, 0x00 },
	{ 0x0942, 0x0008, 0x00 },
	{ 0x0520, 0x0100, 0x00 },
	{ 0x0532, 0x0100, 0x00 },
	{ 0x0a2a, 0x8060, 0x00 },
	{ 0x0a2c, 0x2020, 0x00 },
	{ 0x0a32, 0x0301, 0x00 },
	{ 0x0a26, 0x0048, 0x00 },
	{ 0x0a28, 0x001a, 0x00 },
	{ 0x0a36, 0x0000, 0x00 },
	{ 0x0408, 0x0202, 0x00 },
	{ 0x0418, 0x0000, 0x00 },
	{ 0x0800, 0x0000, 0x00 },
	{ 0x0008, 0x02e8, 0x00 },
	{ 0x000c, 0x000c, 0x00 },
	{ 0x0804, 0x0010, 0x00 },
	{ 0x0026, 0x003e, 0x00 },
	{ 0x002c, 0x0c71, 0x00 },
	{ 0x005c, 0x0202, 0x00 },
	{ 0x002e, 0x1111, 0x00 },
	{ 0x0032, 0x1111, 0x00 },
	{ 0x0006, 0x0ca6, 0x00 },
	{ 0x0a0e, 0x0001, 0x00 },
	{ 0x0a12, 0x1070, 0x00 },
	{ 0x0a14, 0x0c30, 0x00 },
	{ 0x075c, 0x0100, 0x00 },
	{ 0x0050, 0x4300, 0x00 },
	{ 0x0722, 0x0700, 0x00 },
	{ 0x004c, 0x0100, 0x00 },
};

 /* cust1_setting aperture mode */
static struct imgsensor_i2c_reg cust1_setting[] = {
	{ 0x0f32, 0x0249, 0x00 },
	{ 0x0f38, 0x0376, 0x00 },
	{ 0x0f3a, 0x4007, 0x00 },
	{ 0x093e, 0x0000, 0x00 },
	{ 0x0920, 0xc106, 0x00 },
	{ 0x0922, 0x061a, 0x00 },
	{ 0x0924, 0x0206, 0x00 },
	{ 0x0926, 0x0b09, 0x00 },
	{ 0x0928, 0x0b08, 0x00 },
	{ 0x092a, 0x0a06, 0x00 },
	{ 0x092c, 0x1500, 0x00 },
	{ 0x0910, 0x0317, 0x00 },
	{ 0x0912, 0x0139, 0x00 },
	{ 0x0914, 0x006c, 0x00 },
	{ 0x0916, 0x006c, 0x00 },
	{ 0x091a, 0x006d, 0x00 },
	{ 0x0938, 0x4000, 0x00 },
	{ 0x0904, 0x2bb0, 0x00 },
	{ 0x0942, 0x0008, 0x00 },
	{ 0x0520, 0x0100, 0x00 },
	{ 0x0532, 0x0100, 0x00 },
	{ 0x0a2a, 0x8060, 0x00 },
	{ 0x0a2c, 0x2020, 0x00 },
	{ 0x0a32, 0x0301, 0x00 },
	{ 0x0a26, 0x0048, 0x00 },
	{ 0x0a28, 0x001a, 0x00 },
	{ 0x0a36, 0x0000, 0x00 },
	{ 0x0408, 0x0202, 0x00 },
	{ 0x0418, 0x0000, 0x00 },
	{ 0x0800, 0x0000, 0x00 },
	{ 0x0008, 0x02e8, 0x00 },
	{ 0x000c, 0x000c, 0x00 },
	{ 0x0804, 0x01e8, 0x00 },
	{ 0x0026, 0x018e, 0x00 },
	{ 0x002c, 0x0b21, 0x00 },
	{ 0x005c, 0x0202, 0x00 },
	{ 0x002e, 0x1111, 0x00 },
	{ 0x0032, 0x1111, 0x00 },
	{ 0x0006, 0x0ca6, 0x00 },
	{ 0x0a0e, 0x0001, 0x00 },
	{ 0x0a12, 0x0cc0, 0x00 },
	{ 0x0a14, 0x0990, 0x00 },
	{ 0x075c, 0x0100, 0x00 },
	{ 0x0050, 0x4300, 0x00 },
	{ 0x0722, 0x0700, 0x00 },
	{ 0x004c, 0x0100, 0x00 },
};

static struct imgsensor_i2c_reg_table dump_setting[] = {
	{ 0x0a00, 0x0000, IMGSENSOR_I2C_WORD_DATA, IMGSENSOR_I2C_READ, 0 },
	{ 0x0956, 0x0000, IMGSENSOR_I2C_WORD_DATA, IMGSENSOR_I2C_READ, 0 },
	{ 0x0008, 0x0000, IMGSENSOR_I2C_WORD_DATA, IMGSENSOR_I2C_READ, 0 },
	{ 0x0006, 0x0000, IMGSENSOR_I2C_WORD_DATA, IMGSENSOR_I2C_READ, 0 },
};

static struct imgsensor_info_t imgsensor_info = {
	.sensor_id_reg = 0x0F16,
	.sensor_id = HI1333_QTECH_SENSOR_ID,
	.checksum_value = 0xabaa55c3,
	.pre = {
		.pclk = 584000000,
		.linelength = 5952,
		.framelength = 3238,
		.startx = 0,
		.starty = 0,
		.grabwindow_width = 2104,
		.grabwindow_height = 1560,
		.mipi_data_lp2hs_settle_dc = 85,
		.max_framerate = 303,
		.mipi_pixel_rate = 283200000,
	},
	.cap = {
		.pclk = 584000000,
		.linelength = 5952,
		.framelength = 3238,
		.startx = 0,
		.starty = 0,
		.grabwindow_width = 4208,
		.grabwindow_height = 3120,
		.mipi_data_lp2hs_settle_dc = 85,
		.max_framerate = 303,
		.mipi_pixel_rate = 566400000,
	},
	.normal_video = {
		.pclk = 584000000,
		.linelength = 5952,
		.framelength = 3238,
		.startx = 0,
		.starty = 0,
		.grabwindow_width = 4208,
		.grabwindow_height = 3120,
		.mipi_data_lp2hs_settle_dc = 85,
		.max_framerate = 303,
		.mipi_pixel_rate = 566400000,
	},
	.hs_video = {
		.pclk = 584000000,
		.linelength = 5952,
		.framelength = 3238,
		.startx = 0,
		.starty = 0,
		.grabwindow_width = 4208,
		.grabwindow_height = 3120,
		.mipi_data_lp2hs_settle_dc = 85,
		.max_framerate = 303,
		.mipi_pixel_rate = 566400000,
	},
	.slim_video = {
		.pclk = 584000000,
		.linelength = 5952,
		.framelength = 3238,
		.startx = 0,
		.starty = 0,
		.grabwindow_width = 4208,
		.grabwindow_height = 3120,
		.mipi_data_lp2hs_settle_dc = 85,
		.max_framerate = 303,
		.mipi_pixel_rate = 566400000,
	},
	.custom1 = {
		.pclk = 584000000,
		.linelength = 5952,
		.framelength = 3238,
		.startx = 0,
		.starty = 0,
		.grabwindow_width = 3264,
		.grabwindow_height = 2448,
		.mipi_data_lp2hs_settle_dc = 85,
		.max_framerate = 303,
		.mipi_pixel_rate = 566400000,
	},
	.init_setting = {
		.setting = init_setting,
		.size = IMGSENSOR_ARRAY_SIZE(init_setting),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_WORD_DATA,
		.delay = 0,
	},
	.pre_setting = {
		.setting = preview_setting,
		.size = IMGSENSOR_ARRAY_SIZE(preview_setting),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_WORD_DATA,
		.delay = 0,
	},
	.cap_setting = {
		.setting = capture_setting,
		.size = IMGSENSOR_ARRAY_SIZE(capture_setting),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_WORD_DATA,
		.delay = 0,
	},
	.normal_video_setting = {
		.setting = video_setting,
		.size = IMGSENSOR_ARRAY_SIZE(video_setting),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_WORD_DATA,
		.delay = 0,
	},
	.hs_video_setting = {
		.setting = hsvideo_setting,
		.size = IMGSENSOR_ARRAY_SIZE(hsvideo_setting),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_WORD_DATA,
		.delay = 0,
	},
	.slim_setting = {
		.setting = lsvideo_setting,
		.size = IMGSENSOR_ARRAY_SIZE(lsvideo_setting),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_WORD_DATA,
		.delay = 0,
	},
	.custom1_setting = {
		.setting = cust1_setting,
		.size = IMGSENSOR_ARRAY_SIZE(cust1_setting),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_WORD_DATA,
		.delay = 0,
	},
	.streamon_setting = {
		.setting = stream_on,
		.size = IMGSENSOR_ARRAY_SIZE(stream_on),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_WORD_DATA,
		.delay = 0,
	},
	.streamoff_setting = {
		.setting = stream_off,
		.size = IMGSENSOR_ARRAY_SIZE(stream_off),
		.addr_type = IMGSENSOR_I2C_WORD_ADDR,
		.data_type = IMGSENSOR_I2C_WORD_DATA,
		.delay = 0,
	},
	.dump_info = {
		.setting = dump_setting,
		.size = IMGSENSOR_ARRAY_SIZE(dump_setting),
	},

	.margin = 7,
	.min_shutter = 7,
	.max_frame_length = 0xffff,
	.ae_shut_delay_frame = 0,
	.ae_sensor_gain_delay_frame = 0,
	.ae_ispGain_delay_frame = 2,
	.ihdr_support = 0,
	.ihdr_le_firstline = 0,
	.sensor_mode_num = 6,

	.cap_delay_frame = 3,
	.pre_delay_frame = 3,
	.video_delay_frame = 3,
	.hs_video_delay_frame = 3,
	.slim_video_delay_frame = 3,
	.custom1_delay_frame = 3,
	.isp_driving_current = ISP_DRIVING_4MA,
	.sensor_interface_type = SENSOR_INTERFACE_TYPE_MIPI,
	.mipi_sensor_type = MIPI_OPHY_NCSI2,
	.mipi_settle_delay_mode = MIPI_SETTLEDELAY_MANUAL,
	.sensor_output_dataformat = SENSOR_OUTPUT_FORMAT_RAW_Gr,
	.mclk = 24,
	.mipi_lane_num = SENSOR_MIPI_4_LANE,
	.i2c_addr_table = { 0x40, 0xff },
	.i2c_speed = 400,
	.addr_type = IMGSENSOR_I2C_WORD_ADDR,
};

static struct imgsensor_t imgsensor = {
	.mirror = IMAGE_NORMAL,
	.sensor_mode = IMGSENSOR_MODE_INIT,
	.shutter = 0x0100,
	.gain = 0xe0,
	.dummy_pixel = 0,
	.dummy_line = 0,
	.current_fps = 300,
	.autoflicker_en = KAL_FALSE,
	.test_pattern = KAL_FALSE,
	.current_scenario_id = MSDK_SCENARIO_ID_CAMERA_PREVIEW,
	.ihdr_en = 0,
	.i2c_write_id = 0x40,
};

static struct SENSOR_WINSIZE_INFO_STRUCT imgsensor_winsize_info[] = {
	/* preview (2104 x 1560) */
	{
		4208, 3120, /* full_w, full_h */
		0, 0, /* x0_offset, y0_offset */
		4208, 3120, /* w0_size, h0_size */
		2104, 1562, /* scale_w, scale_h */
		0, 0, /* x1_offset, y1_offset */
		2104, 1560, /* w1_size, h1_size */
		0, 0, /* x2_tg_offset, y2_tg_offset */
		2104, 1560, /* w2_tg_size, h2_tg_size */
	},
	/* capture (4208 x 3120) */
	{
		4208, 3120,
		0, 0,
		4208, 3120,
		4208, 3120,
		0, 0,
		4208, 3120,
		0, 0,
		4208, 3120,
	},
	/* VIDEO (4208 x 3120) */
	{
		4208, 3120,
		0, 0,
		4208, 3120,
		4208, 3120,
		0, 0,
		4208, 3120,
		0, 0,
		4208, 3120,
	},
	/* hs_video */
	{
		4208, 3120,
		0, 0,
		4208, 3120,
		4208, 3120,
		0, 0,
		4208, 3120,
		0, 0,
		4208, 3120,
	},
	/* slim_video */
	{
		4208, 3120,
		0, 0,
		4208, 3120,
		4208, 3120,
		0, 0,
		4208, 3120,
		0, 0,
		4208, 3120,
	},
	/* custom1 aperture */
	{
		3264, 2448,
		0, 0,
		3264, 2448,
		3264, 2448,
		0, 0,
		3264, 2448,
		0, 0,
		3264, 2448,
	},
};

static struct SET_PD_BLOCK_INFO_T imgsensor_pd_info = {
	.i4OffsetX = 56,
	.i4OffsetY = 24,
	.i4PitchX = 64,
	.i4PitchY = 64,
	.i4PairNum = 16,
	.i4SubBlkW = 16,
	.i4SubBlkH = 16,
	.i4PosR = {
		{ 60, 31 },
		{ 80, 31 },
		{ 92, 31 },
		{ 112, 31 },
		{ 64, 43 },
		{ 76, 43 },
		{ 96, 43 },
		{ 108, 43 },
		{ 60, 63 },
		{ 80, 63 },
		{ 92, 63 },
		{ 112, 63 },
		{ 64, 75 },
		{ 76, 75 },
		{ 96, 75 },
		{ 108, 75 },
	},
	.i4PosL = {
		{ 60, 27 },
		{ 80, 27 },
		{ 92, 27 },
		{ 112, 27 },
		{ 64, 47 },
		{ 76, 47 },
		{ 96, 47 },
		{ 108, 47 },
		{ 60, 59 },
		{ 80, 59 },
		{ 92, 59 },
		{ 112, 59 },
		{ 64, 79 },
		{ 76, 79 },
		{ 96, 79 },
		{ 108, 79 }
	},

	.i4BlockNumX = 64,
	.i4BlockNumY = 48,
	.iMirrorFlip = 0,
};

#endif
